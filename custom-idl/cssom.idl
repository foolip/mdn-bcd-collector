// https://www.w3.org/TR/DOM-Level-2-Style/css.html

[Exposed=Window]
interface CSSPrimitiveValue : CSSValue {
  const unsigned short CSS_UNKNOWN = 0;
  const unsigned short CSS_NUMBER = 1;
  const unsigned short CSS_PERCENTAGE = 2;
  const unsigned short CSS_EMS = 3;
  const unsigned short CSS_EXS = 4;
  const unsigned short CSS_PX = 5;
  const unsigned short CSS_CM = 6;
  const unsigned short CSS_MM = 7;
  const unsigned short CSS_IN = 8;
  const unsigned short CSS_PT = 9;
  const unsigned short CSS_PC = 10;
  const unsigned short CSS_DEG = 11;
  const unsigned short CSS_RAD = 12;
  const unsigned short CSS_GRAD = 13;
  const unsigned short CSS_MS = 14;
  const unsigned short CSS_S = 15;
  const unsigned short CSS_HZ = 16;
  const unsigned short CSS_KHZ = 17;
  const unsigned short CSS_DIMENSION = 18;
  const unsigned short CSS_STRING = 19;
  const unsigned short CSS_URI = 20;
  const unsigned short CSS_IDENT = 21;
  const unsigned short CSS_ATTR = 22;
  const unsigned short CSS_COUNTER = 23;
  const unsigned short CSS_RECT = 24;
  const unsigned short CSS_RGBCOLOR = 25;

  readonly attribute unsigned short primitiveType;
  undefined setFloatValue(unsigned short unitType, float floatValue);
  float getFloatValue(unsigned short unitType);
  undefined setStringValue(unsigned short stringType, DOMString stringValue);
  DOMString getStringValue();
  Counter getCounterValue();
  Rect getRectValue();
  RGBColor getRGBColorValue();
};

[Exposed=Window]
interface CSSValue {
  const unsigned short CSS_INHERIT = 0;
  const unsigned short CSS_PRIMITIVE_VALUE = 1;
  const unsigned short CSS_VALUE_LIST = 2;
  const unsigned short CSS_CUSTOM = 3;

  attribute DOMString cssText;
  readonly attribute unsigned short cssValueType;
};

[Exposed=Window]
interface CSSValueList : CSSValue {
  readonly attribute unsigned long length;
  CSSValue item(unsigned long index);
};

[Exposed=Window]
interface RGBColor {
  readonly attribute CSSPrimitiveValue red;
  readonly attribute CSSPrimitiveValue green;
  readonly attribute CSSPrimitiveValue blue;
};

[Exposed=Window]
interface Rect {
  readonly attribute CSSPrimitiveValue top;
  readonly attribute CSSPrimitiveValue right;
  readonly attribute CSSPrimitiveValue bottom;
  readonly attribute CSSPrimitiveValue left;
};

[Exposed=Window]
interface Counter {
  readonly attribute DOMString identifier;
  readonly attribute DOMString listStyle;
  readonly attribute DOMString separator;
};

partial interface CSSStyleDeclaration {
  CSSValue getPropertyCSSValue(DOMString property);
  iterable<CSSNumericValue>;
};

partial interface Document {
  CSSStyleDeclaration getOverrideStyle(optional Element? element = null, optional DOMString? pseudoElement = null);
};

// Non-standard stuff

// https://github.com/mozilla/gecko-dev/blob/358fbca0398ac651f5ea6030be39b1870ec180a5/dom/webidl/CSS2Properties.webidl.in
[Exposed=Window]
interface CSS2Properties : CSSStyleDeclaration {};

partial interface CSSStyleDeclaration {
  // https://github.com/WebKit/WebKit/blob/2ebcb2f801bc60264b1a154a7970e2581a438db2/Source/WebCore/css/CSSStyleDeclaration.idl#L45
  DOMString getPropertyShorthand(DOMString property);

  // https://github.com/WebKit/WebKit/blob/2ebcb2f801bc60264b1a154a7970e2581a438db2/Source/WebCore/css/CSSStyleDeclaration.idl#L46
  boolean isPropertyImplicit(DOMString property);
};

// https://github.com/mozilla/gecko-dev/blob/358fbca0398ac651f5ea6030be39b1870ec180a5/dom/webidl/CSSMozDocumentRule.webidl
[Exposed=Window]
interface CSSMozDocumentRule : CSSConditionRule {};

partial interface Document {
  // https://www.w3.org/Bugs/Public/show_bug.cgi?id=29471
  attribute DOMString? selectedStyleSheetSet;
  readonly attribute DOMString? lastStyleSheetSet;
  readonly attribute DOMString? preferredStyleSheetSet;
  readonly attribute FrozenArray<DOMString> styleSheetSets;
  undefined enableStyleSheetsForSet(DOMString? name);

  // https://developer.mozilla.org/en-US/docs/Web/API/Document/width
  readonly attribute long width;
  // https://developer.mozilla.org/en-US/docs/Web/API/Document/height
  readonly attribute long height;
};

[Exposed=Window] interface MSCurrentStyleCSSProperties {};
[Exposed=Window] interface MSStyleCSSProperties {};

partial interface Element {
  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa703980(v=vs.85)
  readonly attribute MSCurrentStyleCSSProperties? currentStyle;
  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa703996(v=vs.85)
  readonly attribute MSStyleCSSProperties? runtimeStyle;
};

partial interface Window {
  // https://github.com/WebKit/WebKit/blob/bc44d2f960d35b47803c79ffbdc9cf57c0a01778/Source/WebCore/page/DOMWindow.idl#L124
  // https://chromium.googlesource.com/chromium/src.git/+/9b52888ec6e049583e3765eb6ed2f7c58c1d50a0
  CSSRuleList getMatchedCSSRules(optional Element? element = null, optional DOMString? pseudoElement = null);
};
