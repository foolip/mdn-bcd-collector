// https://www.w3.org/TR/1998/WD-DOM-Level-2-19981228/idl-definitions.html

// routeEvent() was on an EventCapturer interface together with captureEvent()
// and releaseEvent(). Those are on Document and Window, so do the same here.

partial interface Document {
  void routeEvent();
};

partial interface Window {
  void routeEvent();
};

// https://www.w3.org/TR/1999/WD-DOM-Level-2-19990719/idl-definitions.html

partial interface Event {
  void preventBubble();
  void preventCapture();
};

// https://www.w3.org/TR/DOM-Level-2-Traversal-Range/idl-definitions.html
partial interface NodeIterator {
  readonly attribute boolean expandEntityReferences;
};
partial interface TreeWalker {
  readonly attribute boolean expandEntityReferences;
};

// https://www.w3.org/TR/DOM-Level-3-Core/idl-definitions.html

typedef any DOMUserData;
typedef object DOMObject;

partial interface Attr {
  readonly attribute TypeInfo schemaTypeInfo;
  readonly attribute boolean isId;
};

partial interface Document {
  EntityReference createEntityReference(DOMString name);
  readonly attribute DOMString xmlEncoding;
  attribute boolean xmlStandalone;
  readonly attribute DOMString xmlVersion;
  attribute boolean strictErrorChecking;
  readonly attribute DOMConfiguration domConfig;
  void normalizeDocument();
  Node renameNode(Node n, DOMString namespaceURI, DOMString qualifiedName);
};

partial interface DocumentType {
  readonly attribute NamedNodeMap entities;
  readonly attribute NamedNodeMap notations;
  readonly attribute DOMString internalSubset;
};

[Exposed=Window]
interface DOMConfiguration {
  void setParameter(DOMString name, DOMUserData value);
  DOMUserData getParameter(DOMString name);
  boolean canSetParameter(DOMString name, DOMUserData value);
  readonly attribute DOMStringList parameterNames;
};

[Exposed=Window]
interface DOMError {
  const unsigned short SEVERITY_WARNING = 1;
  const unsigned short SEVERITY_ERROR = 2;
  const unsigned short SEVERITY_FATAL_ERROR = 3;

  readonly attribute unsigned short severity;
  readonly attribute DOMString message;
  readonly attribute DOMString type;
  readonly attribute DOMObject relatedException;
  readonly attribute DOMObject relatedData;
  readonly attribute DOMLocator location;

  readonly attribute DOMString name;
};

[Exposed=Window]
callback interface DOMErrorHandler {
  boolean handleError(DOMError error);
};

partial interface DOMImplementation {
  DOMObject getFeature(DOMString feature, DOMString version);
};

[Exposed=Window]
interface DOMImplementationList {
  DOMImplementation item(unsigned long index);
  readonly attribute unsigned long length;
};

[Exposed=Window]
interface DOMImplementationSource {
  DOMImplementation getDOMImplementation(DOMString features);
  DOMImplementationList getDOMImplementationList(DOMString features);
};

[Exposed=Window]
interface DOMLocator {
  readonly attribute long lineNumber;
  readonly attribute long columnNumber;
  readonly attribute long byteOffset;
  readonly attribute long utf16Offset;
  readonly attribute Node relatedNode;
  readonly attribute DOMString uri;
};

partial interface Element {
  readonly attribute TypeInfo schemaTypeInfo;
  void setIdAttribute(DOMString name, boolean isId);
  void setIdAttributeNS(DOMString namespaceURI, DOMString localName, boolean isId);
  void setIdAttributeNode(Attr idAttr, boolean isId);
};

[Exposed=Window]
interface Entity : Node {
  readonly attribute DOMString publicId;
  readonly attribute DOMString systemId;
  readonly attribute DOMString notationName;
  readonly attribute DOMString inputEncoding;
  readonly attribute DOMString xmlEncoding;
  readonly attribute DOMString xmlVersion;
};

[Exposed=Window]
interface EntityReference : Node {};

[Exposed=Window]
interface NameList {
  DOMString getName(unsigned long index);
  DOMString getNamespaceURI(unsigned long index);
  readonly attribute unsigned long length;
  boolean contains(DOMString str);
  boolean containsNS(DOMString namespaceURI, DOMString name);
};

partial interface Node {
  boolean isSupported(DOMString feature, DOMString version);
  DOMObject getFeature(DOMString feature, DOMString version);
  DOMUserData getUserData(DOMString key);
  DOMUserData setUserData(DOMString key, DOMUserData data, UserDataHandler handler);
};

[Exposed=Window]
interface Notation : Node {
  readonly attribute DOMString publicId;
  readonly attribute DOMString systemId;
};

partial interface Text {
  readonly attribute boolean isElementContentWhitespace;
  Text replaceWholeText(DOMString content);
};

[Exposed=Window]
interface TypeInfo {
  readonly attribute DOMString typeName;
  readonly attribute DOMString typeNamespace;

  const unsigned long DERIVATION_RESTRICTION = 0x00000001;
  const unsigned long DERIVATION_EXTENSION = 0x00000002;
  const unsigned long DERIVATION_UNION = 0x00000004;
  const unsigned long DERIVATION_LIST = 0x00000008;

  boolean isDerivedFrom(DOMString typeNamespace, DOMString typeName, unsigned long derivationMethod);
};

[Exposed=Window]
interface UserDataHandler {
  const unsigned short NODE_CLONED = 1;
  const unsigned short NODE_IMPORTED = 2;
  const unsigned short NODE_DELETED = 3;
  const unsigned short NODE_RENAMED = 4;
  const unsigned short NODE_ADOPTED = 5;

  void handle(unsigned short operation, DOMString key, DOMUserData data, Node src, Node dst);
};

// Non-standard stuff

partial interface Document {
  // https://developer.mozilla.org/en-US/docs/Web/API/Document#Non-standard_extensions
  readonly attribute USVString? documentURIObject;
  readonly attribute Node? popupNode;
  readonly attribute Node? tooltipNode;
  object getBoxObjectFor(DOMElement element);
  void loadOverlay(DOMString url, object observer);
  void queryCommandText();

  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/jj160755(v%3Dvs.85)
  boolean execCommandShowHelp(DOMString name);
  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752589(v=vs.85)
  readonly attribute long fileSize;
  boolean contains();

  // https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSetImageElement
  void mozSetImageElement(DOMString imageElementId, Element? imageElement);

  // https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSyntheticDocument
  readonly attribute boolean mozSyntheticDocument;

  // https://www.w3.org/Bugs/Public/show_bug.cgi?id=14600
  void releaseCapture();
};

partial interface Element {
  // https://www.w3.org/Bugs/Public/show_bug.cgi?id=14600
  void setCapture(optional boolean retargetToElement);
};

partial interface Event {
  // https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget
  readonly attribute EventTarget? explicitOriginalTarget;
  // https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget
  readonly attribute EventTarget? originalTarget;
  // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
  boolean getPreventDefault();
};

partial interface Range {
  void expand(optional DOMString unit = "");
  short compareNode(Node node);
};
