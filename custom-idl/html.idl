// https://github.com/whatwg/html/pull/6153
// https://html.spec.whatwg.org/commit-snapshots/27ca698a224a4fcf59b647be80a0c86c3c6abba5/#applicationcache
[SecureContext, Exposed=Window]
interface ApplicationCache : EventTarget {
  // update status
  const unsigned short UNCACHED = 0;
  const unsigned short IDLE = 1;
  const unsigned short CHECKING = 2;
  const unsigned short DOWNLOADING = 3;
  const unsigned short UPDATEREADY = 4;
  const unsigned short OBSOLETE = 5;
  readonly attribute unsigned short status;

  // updates
  undefined update();
  undefined abort();
  undefined swapCache();

  // events
  attribute EventHandler onchecking;
  attribute EventHandler onerror;
  attribute EventHandler onnoupdate;
  attribute EventHandler ondownloading;
  attribute EventHandler onprogress;
  attribute EventHandler onupdateready;
  attribute EventHandler oncached;
  attribute EventHandler onobsolete;
};

partial interface SharedWorkerGlobalScope {
  [SecureContext] readonly attribute ApplicationCache applicationCache;
};

partial interface Window {
  [SecureContext] readonly attribute ApplicationCache applicationCache;
};

// https://github.com/whatwg/html/pull/1942
dictionary HitRegionOptions {
  Path2D? path = null;
  CanvasFillRule fillRule = "nonzero";
  DOMString id = "";
  DOMString? parentID = null;
  DOMString cursor = "inherit";
  // for control-backed regions:
  Element? control = null;
  // for unbacked regions:
  DOMString? label = null;
  DOMString? role = null;
};

// https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/html/HTMLVideoElement.idl?rev=267813#L63
enum VideoPresentationMode { "inline", "fullscreen", "picture-in-picture" };

partial interface CanvasRenderingContext2D {
  // https://github.com/whatwg/html/pull/1942
  undefined addHitRegion(optional HitRegionOptions options = {});
  undefined removeHitRegion(DOMString id);
  undefined clearHitRegions();

  attribute DOMMatrix currentTransform;
  undefined drawWidgetAsOnScreen(Window window);
  undefined drawWindow(Window window, double x, double y, double w, double h, DOMString bgColor, optional byte flags);

  // https://bugzilla.mozilla.org/show_bug.cgi?id=1294360
  attribute object mozCurrentTransform;
  attribute object mozCurrentTransformInverse;

  // https://bugzilla.mozilla.org/show_bug.cgi?id=1228850
  attribute boolean mozImageSmoothingEnabled;

  // https://bugzilla.mozilla.org/show_bug.cgi?id=1294362
  attribute DOMString mozTextStyle;

  // Was in Edge 14.
  attribute boolean msImageSmoothingEnabled;

  // https://trac.webkit.org/changeset/96626/webkit
  attribute object webkitLineDash;
  attribute float webkitLineDashOffset;

  // https://trac.webkit.org/changeset/113780/webkit
  readonly attribute float webkitBackingStorePixelRatio;

  // https://trac.webkit.org/changeset/114150/webkit
  undefined webkitPutImageDataHD();
  ImageData webkitGetImageDataHD();

  // https://trac.webkit.org/changeset/117635/webkit
  attribute boolean webkitImageSmoothingEnabled;
};

partial interface CloseEvent {
  undefined initCloseEvent();
};

// https://hg.mozilla.org/mozilla-central/file/a451ebba378efcce0967e508a8107ab14dd5edcb/dom/webidl/DataTransfer.webidl#l44
partial interface DataTransfer {
  undefined addElement(Element element);
  readonly attribute unsigned long mozItemCount;
  attribute DOMString mozCursor;
  DOMStringList mozTypesAt(unsigned long index);
  undefined mozClearDataAt(DOMString format, unsigned long index);
  undefined mozSetDataAt(DOMString format, any data, unsigned long index);
  any mozGetDataAt(DOMString format, unsigned long index);
  readonly attribute boolean mozUserCancelled;
  readonly attribute Node? mozSourceNode;
};

dictionary ElementRegistrationOptions {
  object? prototype = null;
  DOMString? extends = null;
};

partial interface Document {
  // https://github.com/whatwg/html/pull/1103
  attribute EventHandler onafterscriptexecute;
  attribute EventHandler onbeforescriptexecute;

  // https://github.com/whatwg/html/pull/951
  readonly attribute DOMString origin;

  any registerElement(DOMString type, optional ElementRegistrationOptions options = {});
};

partial interface DragEvent {
  undefined initDragEvent();
};

partial interface Element {
  // https://github.com/whatwg/html/issues/667
  attribute EventHandler onsearch;

  readonly attribute boolean tabStop;

  // event handler attributes in the wrong place
  attribute EventHandler oncopy;
  attribute EventHandler oncut;
  attribute EventHandler onpaste;
  attribute EventHandler onwebkitanimationend;
  attribute EventHandler onwebkitanimationiteration;
  attribute EventHandler onwebkitanimationstart;
  attribute EventHandler onwebkittransitionend;
};

partial interface EventSource {
  readonly attribute USVString URL;
};

partial interface mixin GlobalEventHandlers {
  // https://github.com/mozilla/gecko-dev/blob/ffdb6a4d934b3f5294f18cf0e1df618109ccb36b/dom/webidl/EventHandler.webidl#L47
  attribute EventHandler ondragexit;

  // https://github.com/mozilla/gecko-dev/blob/ffdb6a4d934b3f5294f18cf0e1df618109ccb36b/dom/webidl/EventHandler.webidl#L65
  attribute EventHandler onloadend;

  // https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/dom/global_event_handlers.idl;l=76;drc=7a26ab64ceec9a43266fb544ab09adbe641504e3
  attribute EventHandler onmousewheel;

  // https://github.com/whatwg/html/issues/667
  attribute EventHandler onsearch;

  // https://github.com/mozilla/gecko-dev/blob/ffdb6a4d934b3f5294f18cf0e1df618109ccb36b/dom/webidl/EventHandler.webidl#L87
  attribute EventHandler onshow;
};

// DocumentAndElementEventHandlers here is used for things that have been on
// GlobalEventHandlers but are now on Window, as it is the complementary set.
// https://trac.webkit.org/changeset/267791/webkit
partial interface mixin DocumentAndElementEventHandlers {
  attribute EventHandler onrejectionhandled;
  attribute EventHandler onunhandledrejection;
};

partial interface HashChangeEvent {
  undefined initHashChangeEvent();
};

partial interface HTMLAnchorElement {
  // https://github.com/whatwg/html/pull/3870
  [CEReactions] attribute DOMString hrefTranslate;

  attribute DOMString media;
};

partial interface HTMLAreaElement {
  attribute DOMString hreflang;
  attribute DOMString media;
  attribute DOMString type;
};

[LegacyFactoryFunction=Audio(optional DOMString src)]
partial interface HTMLAudioElement {
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement#Obsolete_Mozilla-only_methods
  unsigned long long mozCurrentSampleOffset();
  undefined mozSetup(unsigned long channels, unsigned long rate);
  unsigned long mozWriteAudio(any data);
};

// https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-32774408
[Exposed=Window]
interface HTMLBaseFontElement : HTMLElement {
  attribute DOMString color;
  attribute DOMString face;
  attribute long size;
};

partial interface HTMLButtonElement {
  attribute HTMLMenuElement menu;
};

partial interface HTMLCanvasElement {
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozFetchAsStream
  undefined mozFetchAsStream(VoidFunction callback, optional DOMString type = "image/png");
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozGetAsFile
  File mozGetAsFile(DOMString name, optional DOMString type = "image/png");
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque
  attribute boolean mozOpaque;
  // https://github.com/mozilla/gecko-dev/blob/7c03e28b3d065fa80839e9659fd50bf340913d5f/dom/webidl/HTMLCanvasElement.webidl#L48
  attribute any mozPrintCallback;

  // Was in Edge 18.
  Blob msToBlob();
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/html/html_content_element.idl
[Exposed=Window] interface HTMLContentElement : HTMLElement {
  [Reflect] attribute DOMString select;
  NodeList getDistributedNodes();
};

// https://github.com/whatwg/html/issues/4792
[Exposed=Window]
interface HTMLDocument : Document {
};

partial interface HTMLElement {
  // https://github.com/whatwg/html/pull/213
  attribute boolean itemScope;
  [PutForwards=value] readonly attribute DOMTokenList itemType;
  attribute DOMString itemId;
  [PutForwards=value] readonly attribute DOMTokenList itemRef;
  [PutForwards=value] readonly attribute DOMTokenList itemProp;
  attribute any itemValue; // acts as DOMString on setting

  attribute HTMLMenuElement? contextMenu;
  undefined forceSpellCheck();
  attribute boolean noModule;
  attribute EventHandler onModule;
};

partial interface HTMLFormElement {
  // https://github.com/mdn/browser-compat-data/issues/7519
  attribute DOMString autocapitalize;
};

partial interface HTMLFrameSetElement {
  attribute EventHandler onlanguage;
  attribute EventHandler onorientationchange;
};

partial interface HTMLHeadElement {
  attribute DOMString profile;
};

partial interface HTMLIFrameElement {
  undefined setNfcFocus();
};

partial interface HTMLImageElement {
  attribute EventHandler onerror;
};

partial interface HTMLInputElement {
  // https://github.com/mdn/browser-compat-data/issues/7519
  attribute DOMString autocapitalize;

  // https://github.com/whatwg/html/issues/667
  attribute boolean incremental;

  attribute EventHandler onsearch;
  attribute any weight;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/mozGetFileNameArray
  sequence<DOMString> mozGetFileNameArray();
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/mozSetFileNameArray
  undefined mozSetFileNameArray(sequence<DOMString> fileNames);
  // https://hg.mozilla.org/mozilla-central/file/f22c20641704d783097b1b128d826c8460de7354/dom/webidl/HTMLInputElement.webidl#l163
  undefined mozSetFileArray(sequence<File> files);

  // https://github.com/mozilla/gecko-dev/blob/7c03e28b3d065fa80839e9659fd50bf340913d5f/dom/webidl/HTMLInputElement.webidl#L173
  boolean mozIsTextField(boolean excludePassword);
};

[Exposed=Window]
interface HTMLKeygenElement : HTMLElement {};

partial interface HTMLLinkElement {
  // moved to HTMLOrSVGElement mixin
  attribute DOMString nonce;
};

partial interface HTMLMarqueeElement {
  // https://github.com/whatwg/html/pull/6343
  attribute EventHandler onbounce;
  attribute EventHandler onfinish;
  attribute EventHandler onstart;
};

partial interface HTMLMediaElement {
  readonly attribute DOMTokenList controlsList;
  attribute EventHandler onerror;
  Promise<undefined> seekToNextFrame();

  // Chromium extensions
  readonly attribute unsigned long long webkitAudioDecodedByteCount;
  readonly attribute unsigned long long webkitVideoDecodedByteCount;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Obsolete_attributes
  readonly attribute boolean mozAudioCaptured;
  readonly attribute double mozChannels;
  readonly attribute double mozFragmentEnd;
  attribute unsigned long mozFrameBufferLength;
  readonly attribute double mozSampleRate;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Obsolete_methods
  MediaStream mozCaptureStream();
  MediaStream mozCaptureStreamUntilEnded();
  object mozGetMetadata();
  undefined mozLoadFrom(HTMLMediaElement other);

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Obsolete_event_handlers
  attribute EventHandler onmozinterruptbegin;
  attribute EventHandler onmozinterruptend;

  // Prefixed preservesPitch
  attribute boolean mozPreservesPitch;
  attribute boolean webkitPreservesPitch;

  // https://github.com/WebKit/WebKit/blob/c397d717fcd82a8daff69dccb1354a5f94ca6f9a/Source/WebCore/html/HTMLMediaElement.idl#L99
  readonly attribute boolean webkitHasClosedCaptions;
  attribute boolean webkitClosedCaptionsVisible;

  // https://github.com/WebKit/WebKit/blob/c397d717fcd82a8daff69dccb1354a5f94ca6f9a/Source/WebCore/html/HTMLMediaElement.idl#L124
  undefined webkitShowPlaybackTargetPicker();
  readonly attribute boolean webkitCurrentPlaybackTargetIsWireless;
};

// https://www.w3.org/TR/html51/interactive-elements.html#htmlmenuelement-htmlmenuelement
partial interface HTMLMenuElement {
  attribute DOMString type;
  attribute DOMString label;
};

// https://www.w3.org/TR/html51/interactive-elements.html#htmlmenuitemelement-htmlmenuitemelement
[Exposed=Window]
interface HTMLMenuItemElement : HTMLElement {
  attribute DOMString type;
  attribute DOMString label;
  attribute DOMString icon;
  attribute boolean disabled;
  attribute boolean checked;
  attribute DOMString radiogroup;
  attribute boolean default;

  attribute DOMString command;
};

partial interface HTMLScriptElement {
  // moved to HTMLOrSVGElement mixin
  attribute DOMString nonce;
};

partial interface HTMLSelectElement {
  undefined blur();
  undefined focus();
};

[Exposed=Window]
interface HTMLShadowElement : HTMLElement {
  NodeList getDistributedNodes();
};

partial interface HTMLSourceElement {
  attribute any keySystem;
};

partial interface HTMLStyleElement {
  // moved to HTMLOrSVGElement mixin
  attribute DOMString nonce;

  attribute boolean scoped;
};

partial interface HTMLTableElement {
  attribute boolean sortable;
  undefined stopSorting();
};

partial interface HTMLTextAreaElement {
  // https://github.com/mdn/browser-compat-data/issues/7519
  attribute DOMString autocapitalize;
};

partial interface HTMLVideoElement {
  readonly attribute unsigned long webkitDecodedFrameCount;
  readonly attribute unsigned long webkitDroppedFrameCount;

  // https://docs.microsoft.com/en-us/previous-versions/hh772572(v=vs.85)
  readonly attribute boolean msIsStereo3D;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement#Gecko-specific_properties
  readonly attribute unsigned long mozParsedFrames;
  readonly attribute unsigned long mozDecodedFrames;
  readonly attribute unsigned long mozPresentedFrames;
  readonly attribute unsigned long mozPaintedFrames;
  readonly attribute double mozFrameDelay;
  readonly attribute boolean mozHasAudio;

  // https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/html/HTMLVideoElement.idl?rev=267813#L58
  boolean webkitSupportsPresentationMode(VideoPresentationMode mode);
  readonly attribute VideoPresentationMode webkitPresentationMode;
  undefined webkitSetPresentationMode(VideoPresentationMode mode);

  // https://github.com/WebKit/WebKit/blob/c397d717fcd82a8daff69dccb1354a5f94ca6f9a/Source/WebCore/html/HTMLVideoElement.idl#L50
  attribute boolean webkitWirelessVideoPlaybackDisabled;
};

partial interface Location {
  attribute USVString password;
  attribute USVString username;

  stringifier;
};

partial interface MessageEvent {
  // https://github.com/whatwg/html/pull/4009
  readonly attribute UserActivation? userActivation;
};

partial interface MouseEvent {
  // https://github.com/whatwg/html/pull/1942
  readonly attribute DOMString? region;
};

partial dictionary MouseEventInit {
  // https://github.com/whatwg/html/pull/1942
  DOMString? region = null;
};

partial interface Navigator {
  // https://github.com/whatwg/html/pull/4009
  [SameObject] readonly attribute UserActivation userActivation;

  // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozIsLocallyAvailable
  boolean mozIsLocallyAvailable(DOMString url, boolean ifOffline);

  attribute any authentication;
  readonly attribute DOMString buildID;
  readonly attribute DOMString doNotTrack;
  undefined registerContentHandler();
};

partial interface Plugin {
  readonly attribute DOMString version;
};

partial interface TextTrackCue {
  // https://github.com/WebKit/WebKit/blob/8c5122c3b04d94856c54fb5e686c014a123143f7/Source/WebCore/html/track/TextTrackCue.idl#L48
  DocumentFragment getCueAsHTML();
};

partial interface TextTrackCueList {
   TextTrackCue item(unsigned long index);
};

partial interface TextTrackList {
   TextTrack item(unsigned long index);
};

[Exposed=(Window,Worker)]
interface Transferable {
};

partial interface VideoTrackList {
   VideoTrack item(unsigned long index);
};

// https://github.com/whatwg/html/pull/4009
[Exposed=(Window,Worker,AudioWorklet)]
interface UserActivation {
  readonly attribute boolean hasBeenActive;
  readonly attribute boolean isActive;
};

partial interface Window {
  long webkitRequestAnimationFrame(FrameRequestCallback callback);
  undefined webkitCancelRequestAnimationFrame(long id);
  undefined webkitCancelAnimationFrame(long id);

  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741363(v=vs.85)
  // https://bugs.chromium.org/p/chromium/issues/detail?id=692835
  attribute DOMString defaultStatus;
  attribute DOMString defaultstatus;

  // https://github.com/whatwg/html/issues/3539
  boolean find(optional DOMString string = "",
               optional boolean caseSensitive = false,
               optional boolean backwards = false,
               optional boolean wrap = false,
               optional boolean wholeWord = false,
               optional boolean searchInFrames = false,
               optional boolean showDialog = false);

  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741479(v=vs.85)
  // https://bugs.chromium.org/p/chromium/issues/detail?id=438370
  readonly attribute boolean offscreenBuffering;

  readonly attribute any dialogArguments;
  undefined getAttention();
  undefined getAttentionWithCycleCount();
  CSSStyleDeclaration getDefaultComputedStyle(Element element, DOMString? pseudoAlt);
  readonly attribute any globalStorage;
  undefined home();
  undefined maximize();
  undefined minimize();
  attribute EventHandler onpaint;
  undefined openDialog();
  attribute object pkcs11;
  any returnValue();
  undefined scrollByLines();
  undefined scrollByPages();
  undefined scrollMaxX();
  undefined scrollMaxY();
  undefined setCursor();
  undefined setResizable();
  undefined showModalDialog();
  object sidebar();
  undefined sizeToContent();
  undefined updateCommands();

  readonly attribute double mozAnimationStartTime;
  readonly attribute double mozInnerScreenX;
  readonly attribute double mozInnerScreenY;
  readonly attribute long long mozPaintCount;
};

partial interface WebSocket {
  readonly attribute USVString URL;
};

partial interface WorkerGlobalScope {
  // https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/dump
  undefined dump(any... data);

  // https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onclose
  attribute EventHandler onclose;
};
