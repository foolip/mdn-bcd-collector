// https://github.com/whatwg/html/pull/6153
// https://html.spec.whatwg.org/commit-snapshots/27ca698a224a4fcf59b647be80a0c86c3c6abba5/#applicationcache
[SecureContext, Exposed=Window]
interface ApplicationCache : EventTarget {
  // update status
  const unsigned short UNCACHED = 0;
  const unsigned short IDLE = 1;
  const unsigned short CHECKING = 2;
  const unsigned short DOWNLOADING = 3;
  const unsigned short UPDATEREADY = 4;
  const unsigned short OBSOLETE = 5;
  readonly attribute unsigned short status;

  // updates
  undefined update();
  undefined abort();
  undefined swapCache();

  // events
  attribute EventHandler onchecking;
  attribute EventHandler onerror;
  attribute EventHandler onnoupdate;
  attribute EventHandler ondownloading;
  attribute EventHandler onprogress;
  attribute EventHandler onupdateready;
  attribute EventHandler oncached;
  attribute EventHandler onobsolete;
};

partial interface SharedWorkerGlobalScope {
  [SecureContext] readonly attribute ApplicationCache applicationCache;
};

partial interface Window {
  [SecureContext] readonly attribute ApplicationCache applicationCache;
};

partial interface AudioTrackList {
   AudioTrack item(unsigned long index);
};

partial interface DataTransferItemList {
   DataTransferItem item(unsigned long index);
};

// https://github.com/whatwg/html/pull/1942
dictionary HitRegionOptions {
  Path2D? path = null;
  CanvasFillRule fillRule = "nonzero";
  DOMString id = "";
  DOMString? parentID = null;
  DOMString cursor = "inherit";
  // for control-backed regions:
  Element? control = null;
  // for unbacked regions:
  DOMString? label = null;
  DOMString? role = null;
};

// https://www.w3.org/html/wg/spec/common-dom-interfaces.html#domsettabletokenlist-0
interface DOMSettableTokenList : DOMTokenList {
  attribute DOMString value;
};

// https://github.com/whatwg/html/pull/1225
// https://html.spec.whatwg.org/commit-snapshots/927fda0f305452a9c54a25d3ebf9a6ed5ae29fd3/#htmlmediaelement
// https://html.spec.whatwg.org/commit-snapshots/927fda0f305452a9c54a25d3ebf9a6ed5ae29fd3/#mediacontroller

partial interface HTMLMediaElement {
  [CEReactions] attribute DOMString mediaGroup;
  attribute MediaController? controller;
};

enum MediaControllerPlaybackState { "waiting", "playing", "ended" };
[Exposed=Window]
interface MediaController : EventTarget {
  constructor();

  readonly attribute unsigned short readyState; // uses HTMLMediaElement.readyState's values

  readonly attribute TimeRanges buffered;
  readonly attribute TimeRanges seekable;
  readonly attribute unrestricted double duration;
  attribute double currentTime;

  readonly attribute boolean paused;
  readonly attribute MediaControllerPlaybackState playbackState;
  readonly attribute TimeRanges played;
  undefined pause();
  undefined unpause();
  undefined play(); // calls play() on all media elements as well

  attribute double defaultPlaybackRate;
  attribute double playbackRate;

  attribute double volume;
  attribute boolean muted;

  attribute EventHandler onemptied;
  attribute EventHandler onloadedmetadata;
  attribute EventHandler onloadeddata;
  attribute EventHandler oncanplay;
  attribute EventHandler oncanplaythrough;
  attribute EventHandler onplaying;
  attribute EventHandler onended;
  attribute EventHandler onwaiting;

  attribute EventHandler ondurationchange;
  attribute EventHandler ontimeupdate;
  attribute EventHandler onplay;
  attribute EventHandler onpause;
  attribute EventHandler onratechange;
  attribute EventHandler onvolumechange;
};

// https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/html/HTMLVideoElement.idl?rev=267813#L63
enum VideoPresentationMode { "inline", "fullscreen", "picture-in-picture" };

partial interface CanvasRenderingContext2D {
  // https://github.com/whatwg/html/pull/1942
  undefined addHitRegion(optional HitRegionOptions options);
  undefined removeHitRegion(DOMString id);
  undefined clearHitRegions();

  // https://github.com/fserb/canvas2D/blob/95dcc7bf2f27b1fe83e12a23678666e00b992b22/spec/conic-gradient.md#proposal
  CanvasGradient createConicGradient(unrestricted double startAngle, unrestricted double cx, unrestricted double cy);

  attribute DOMMatrix currentTransform;
  undefined drawWidgetAsOnScreen(Window window);
  undefined drawWindow(Window window, double x, double y, double w, double h, DOMString bgColor, optional byte flags);

  // Non-standard legacy aliases in WebKit/Blink
  // https://chromium.googlesource.com/chromium/src/+/ce07cefc396fdf4016e731b4e75592586785c6b0
  // https://trac.webkit.org/changeset/221605/webkit
  undefined clearShadow();
  undefined drawImageFromRect(HTMLImageElement image, optional unrestricted float sx, optional unrestricted float sy, optional unrestricted float sw, optional unrestricted float sh, optional unrestricted float dx, optional unrestricted float dy, optional unrestricted float dw, optional unrestricted float dh, optional DOMString compositeOperation);
  undefined setAlpha(unrestricted float alpha);
  undefined setCompositeOperation(DOMString compositeOperation);
  undefined setFillColor(DOMString color, optional unrestricted float alpha);
  undefined setFillColor(unrestricted float c, unrestricted float m, unrestricted float y, unrestricted float k, unrestricted float a);
  undefined setFillColor(unrestricted float grayLevel, optional unrestricted float alpha);
  undefined setFillColor(unrestricted float r, unrestricted float g, unrestricted float b, unrestricted float a);
  undefined setLineCap(DOMString cap);
  undefined setLineJoin(DOMString join);
  undefined setLineWidth(unrestricted float width);
  undefined setMiterLimit(unrestricted float limit);
  undefined setStrokeColor(DOMString color, optional unrestricted float alpha);
  undefined setStrokeColor(unrestricted float c, unrestricted float m, unrestricted float y, unrestricted float k, unrestricted float a);
  undefined setStrokeColor(unrestricted float grayLevel, optional unrestricted float alpha);
  undefined setStrokeColor(unrestricted float r, unrestricted float g, unrestricted float b, unrestricted float a);
  undefined setShadow(unrestricted float width, unrestricted float height, unrestricted float blur, optional DOMString color, optional unrestricted float alpha);
  undefined setShadow(unrestricted float width, unrestricted float height, unrestricted float blur, unrestricted float c, unrestricted float m, unrestricted float y, unrestricted float k, unrestricted float a);
  undefined setShadow(unrestricted float width, unrestricted float height, unrestricted float blur, unrestricted float grayLevel, optional unrestricted float alpha);
  undefined setShadow(unrestricted float width, unrestricted float height, unrestricted float blur, unrestricted float r, unrestricted float g, unrestricted float b, unrestricted float a);

  // https://bugzilla.mozilla.org/show_bug.cgi?id=1294360
  attribute object mozCurrentTransform;
  attribute object mozCurrentTransformInverse;

  // https://bugzilla.mozilla.org/show_bug.cgi?id=1228850
  attribute boolean mozImageSmoothingEnabled;

  // https://bugzilla.mozilla.org/show_bug.cgi?id=1294362
  attribute DOMString mozTextStyle;

  // Was in Edge 14.
  attribute boolean msImageSmoothingEnabled;

  // https://trac.webkit.org/changeset/96626/webkit
  attribute object webkitLineDash;
  attribute float webkitLineDashOffset;

  // https://trac.webkit.org/changeset/113780/webkit
  readonly attribute float webkitBackingStorePixelRatio;

  // https://trac.webkit.org/changeset/114150/webkit
  undefined webkitPutImageDataHD();
  ImageData webkitGetImageDataHD();

  // https://trac.webkit.org/changeset/117635/webkit
  attribute boolean webkitImageSmoothingEnabled;
};

partial interface CloseEvent {
  undefined initCloseEvent();
};

// https://hg.mozilla.org/mozilla-central/file/a451ebba378efcce0967e508a8107ab14dd5edcb/dom/webidl/DataTransfer.webidl#l44
partial interface DataTransfer {
  undefined addElement(Element element);
  readonly attribute unsigned long mozItemCount;
  attribute DOMString mozCursor;
  DOMStringList mozTypesAt(unsigned long index);
  undefined mozClearDataAt(DOMString format, unsigned long index);
  undefined mozSetDataAt(DOMString format, any data, unsigned long index);
  any mozGetDataAt(DOMString format, unsigned long index);
  readonly attribute boolean mozUserCancelled;
  readonly attribute Node? mozSourceNode;
};

partial interface Document {
  // https://chromium.googlesource.com/chromium/src.git/+/24e58b0d8fab28fa20e69f191d833fe97aaff75d
  any getCSSCanvasContext(DOMString contextId, DOMString name, long width, long height);

  // https://github.com/whatwg/html/pull/213
  NodeList getItems(optional DOMString typeNames = "");

  // https://github.com/whatwg/html/pull/1103
  attribute EventHandler onafterscriptexecute;
  attribute EventHandler onbeforescriptexecute;

  // https://github.com/whatwg/html/pull/951
  readonly attribute DOMString origin;
};

partial interface DragEvent {
  undefined initDragEvent();
};

partial interface Element {
  // https://github.com/mdn/browser-compat-data/issues/6683
  readonly attribute DOMString name;

  // https://github.com/whatwg/html/issues/667
  attribute EventHandler onsearch;

  // event handler attributes in the wrong place
  attribute EventHandler oncopy;
  attribute EventHandler oncut;
  attribute EventHandler onpaste;
  attribute EventHandler onwebkitanimationend;
  attribute EventHandler onwebkitanimationiteration;
  attribute EventHandler onwebkitanimationstart;
  attribute EventHandler onwebkittransitionend;
};

partial interface EventSource {
  readonly attribute USVString URL;
};

partial interface mixin GlobalEventHandlers {
  // https://github.com/mozilla/gecko-dev/blob/ffdb6a4d934b3f5294f18cf0e1df618109ccb36b/dom/webidl/EventHandler.webidl#L47
  attribute EventHandler ondragexit;

  // https://github.com/mozilla/gecko-dev/blob/ffdb6a4d934b3f5294f18cf0e1df618109ccb36b/dom/webidl/EventHandler.webidl#L65
  attribute EventHandler onloadend;

  // https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/dom/global_event_handlers.idl;l=76;drc=7a26ab64ceec9a43266fb544ab09adbe641504e3
  attribute EventHandler onmousewheel;

  // https://github.com/whatwg/html/issues/667
  attribute EventHandler onsearch;

  // https://github.com/mozilla/gecko-dev/blob/ffdb6a4d934b3f5294f18cf0e1df618109ccb36b/dom/webidl/EventHandler.webidl#L87
  attribute EventHandler onshow;
};

// DocumentAndElementEventHandlers here is used for things that have been on
// GlobalEventHandlers but are now on Window, as it is the complementary set.
// https://trac.webkit.org/changeset/267791/webkit
partial interface mixin DocumentAndElementEventHandlers {
  attribute EventHandler onrejectionhandled;
  attribute EventHandler onunhandledrejection;
};

partial interface HashChangeEvent {
  undefined initHashChangeEvent();
};

partial interface HTMLAnchorElement {
  // https://github.com/whatwg/html/pull/3870
  [CEReactions] attribute DOMString hrefTranslate;

  attribute DOMString media;
};

// https://github.com/whatwg/html/pull/1399
// https://html.spec.whatwg.org/commit-snapshots/d0154579f6237358a7a642ae59b894e9116c4fbd/#htmlappletelement
[Exposed=Window]
interface HTMLAppletElement : HTMLElement {
  attribute DOMString align;
  attribute DOMString alt;
  attribute DOMString archive;
  attribute DOMString code;
  attribute USVString codeBase;
  attribute DOMString height;
  attribute unsigned long hspace;
  attribute DOMString name;
  attribute USVString _object; // the underscore is not part of the identifier
  attribute unsigned long vspace;
  attribute DOMString width;
};

partial interface HTMLAreaElement {
  attribute DOMString hreflang;
  attribute DOMString media;
  attribute DOMString type;
};

[LegacyFactoryFunction=Audio(optional DOMString src)]
partial interface HTMLAudioElement {
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement#Obsolete_Mozilla-only_methods
  unsigned long long mozCurrentSampleOffset();
  undefined mozSetup(unsigned long channels, unsigned long rate);
  unsigned long mozWriteAudio(any data);
};

// https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-32774408
[Exposed=Window]
interface HTMLBaseFontElement : HTMLElement {
  attribute DOMString color;
  attribute DOMString face;
  attribute long size;
};

partial interface HTMLButtonElement {
  // https://github.com/mdn/browser-compat-data/issues/8745
  attribute boolean autofocus;

  attribute HTMLMenuElement menu;
};

partial interface HTMLCanvasElement {
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozFetchAsStream
  undefined mozFetchAsStream(VoidFunction callback, optional DOMString type = "image/png");
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozGetAsFile
  File mozGetAsFile(DOMString name, optional DOMString type = "image/png");
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque
  attribute boolean mozOpaque;
  // https://github.com/mozilla/gecko-dev/blob/7c03e28b3d065fa80839e9659fd50bf340913d5f/dom/webidl/HTMLCanvasElement.webidl#L48
  attribute any mozPrintCallback;

  // Was in Edge 18.
  Blob msToBlob();
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/html/html_content_element.idl
[Exposed=Window] interface HTMLContentElement : HTMLElement {
  [Reflect] attribute DOMString select;
  NodeList getDistributedNodes();
};

// https://github.com/whatwg/html/issues/4792
[Exposed=Window]
interface HTMLDocument : Document {
};

partial interface HTMLElement {
  // https://github.com/whatwg/html/pull/213
  attribute boolean itemScope;
  [PutForwards=value] readonly attribute DOMTokenList itemType;
  attribute DOMString itemId;
  [PutForwards=value] readonly attribute DOMTokenList itemRef;
  [PutForwards=value] readonly attribute DOMTokenList itemProp;
  readonly attribute HTMLPropertiesCollection properties;
  attribute any itemValue; // acts as DOMString on setting

  attribute HTMLMenuElement? contextMenu;
  attribute DOMSettableTokenList dropzone;
  undefined forceSpellCheck();
  attribute boolean inert;
  attribute boolean noModule;
  attribute EventHandler onModule;

  // https://github.com/whatwg/html/issues/668
  attribute DOMString outerText;
};

partial interface HTMLFormElement {
  // https://github.com/mdn/browser-compat-data/issues/7519
  attribute DOMString autocapitalize;

  undefined requestAutocomplete();
};

partial interface HTMLFrameElement {
  // https://github.com/WebKit/WebKit/blob/cdb06d0c41ff04eff8f4c65d1c92c8672b4903a6/Source/WebCore/html/HTMLFrameElement.idl#L36
  Document? getSVGDocument();

  // https://github.com/WebKit/WebKit/blob/cdb06d0c41ff04eff8f4c65d1c92c8672b4903a6/Source/WebCore/html/HTMLFrameElement.idl#L38
  readonly attribute long width;
  readonly attribute long height;

  // https://github.com/WebKit/WebKit/blob/cdb06d0c41ff04eff8f4c65d1c92c8672b4903a6/Source/WebCore/html/HTMLFrameElement.idl#L42
  attribute USVString location;
};

partial interface HTMLFrameSetElement {
  attribute EventHandler onlanguage;
  attribute EventHandler onorientationchange;
};

partial interface HTMLHeadElement {
  attribute DOMString profile;
};

partial interface HTMLHtmlElement {
  // https://github.com/WebKit/WebKit/blob/cdb06d0c41ff04eff8f4c65d1c92c8672b4903a6/Source/WebCore/html/HTMLHtmlElement.idl#L24
  attribute DOMString manifest;
};

partial interface HTMLIFrameElement {
  undefined setNfcFocus();
};

partial interface HTMLImageElement {
  attribute EventHandler onerror;
};

partial interface HTMLInputElement {
  // https://github.com/mdn/browser-compat-data/issues/7519
  attribute DOMString autocapitalize;

  // https://github.com/whatwg/html/issues/667
  attribute boolean incremental;

  // https://github.com/mdn/browser-compat-data/issues/8745
  attribute boolean autofocus;

  attribute EventHandler onsearch;
  attribute any weight;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/mozGetFileNameArray
  sequence<DOMString> mozGetFileNameArray();
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/mozSetFileNameArray
  undefined mozSetFileNameArray(sequence<DOMString> fileNames);
  // https://hg.mozilla.org/mozilla-central/file/f22c20641704d783097b1b128d826c8460de7354/dom/webidl/HTMLInputElement.webidl#l163
  undefined mozSetFileArray(sequence<File> files);

  // https://github.com/mozilla/gecko-dev/blob/7c03e28b3d065fa80839e9659fd50bf340913d5f/dom/webidl/HTMLInputElement.webidl#L173
  boolean mozIsTextField(boolean excludePassword);

  // https://github.com/mozilla/gecko-dev/blob/7c03e28b3d065fa80839e9659fd50bf340913d5f/dom/webidl/HTMLInputElement.webidl#L154
  readonly attribute long textLength;
};

[Exposed=Window]
interface HTMLIsIndexElement : HTMLElement {
  readonly attribute HTMLFormElement form;
  attribute DOMString prompt;
};

[Exposed=Window]
interface HTMLKeygenElement : HTMLElement {};

partial interface HTMLLinkElement {
  // moved to HTMLOrSVGElement mixin
  attribute DOMString nonce;
};

partial interface HTMLMarqueeElement {
  // https://github.com/whatwg/html/pull/6343
  attribute EventHandler onbounce;
  attribute EventHandler onfinish;
  attribute EventHandler onstart;
};

partial interface HTMLMediaElement {
  readonly attribute DOMTokenList controlsList;
  readonly attribute double initialTime;
  attribute EventHandler onerror;
  Promise<undefined> seekToNextFrame();

  // Chromium extensions
  readonly attribute unsigned long long webkitAudioDecodedByteCount;
  readonly attribute unsigned long long webkitVideoDecodedByteCount;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Obsolete_attributes
  readonly attribute boolean mozAudioCaptured;
  readonly attribute double mozChannels;
  readonly attribute double mozFragmentEnd;
  attribute unsigned long mozFrameBufferLength;
  readonly attribute double mozSampleRate;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Obsolete_methods
  MediaStream mozCaptureStream();
  MediaStream mozCaptureStreamUntilEnded();
  object mozGetMetadata();
  undefined mozLoadFrom(HTMLMediaElement other);

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Obsolete_event_handlers
  attribute EventHandler onmozinterruptbegin;
  attribute EventHandler onmozinterruptend;

  // Prefixed preservesPitch
  attribute boolean mozPreservesPitch;
  attribute boolean webkitPreservesPitch;

  // https://github.com/WebKit/WebKit/blob/c397d717fcd82a8daff69dccb1354a5f94ca6f9a/Source/WebCore/html/HTMLMediaElement.idl#L99
  readonly attribute boolean webkitHasClosedCaptions;
  attribute boolean webkitClosedCaptionsVisible;

  // https://github.com/WebKit/WebKit/blob/c397d717fcd82a8daff69dccb1354a5f94ca6f9a/Source/WebCore/html/HTMLMediaElement.idl#L124
  undefined webkitShowPlaybackTargetPicker();
  readonly attribute boolean webkitCurrentPlaybackTargetIsWireless;
};

// https://www.w3.org/TR/html51/interactive-elements.html#htmlmenuelement-htmlmenuelement
partial interface HTMLMenuElement {
  attribute DOMString type;
  attribute DOMString label;
};

// https://www.w3.org/TR/html51/interactive-elements.html#htmlmenuitemelement-htmlmenuitemelement
interface HTMLMenuItemElement : HTMLElement {
  attribute DOMString type;
  attribute DOMString label;
  attribute DOMString icon;
  attribute boolean disabled;
  attribute boolean checked;
  attribute DOMString radiogroup;
  attribute boolean default;

  attribute DOMString command;

  // https://github.com/mozilla/gecko-dev/blob/7c03e28b3d065fa80839e9659fd50bf340913d5f/dom/webidl/HTMLMenuItemElement.webidl#L35
  attribute boolean defaultChecked;
};

partial interface HTMLObjectElement {
  attribute boolean typeMustMatch;
};

partial interface HTMLPreElement {
  // https://github.com/WebKit/WebKit/blob/8c5122c3b04d94856c54fb5e686c014a123143f7/Source/WebCore/html/HTMLPreElement.idl#L29
  attribute boolean wrap;
};

// https://github.com/whatwg/html/pull/213
interface HTMLPropertiesCollection : HTMLCollection {
  // inherits length and item()
  getter PropertyNodeList? namedItem(DOMString name); // shadows inherited namedItem()
  [SameObject] readonly attribute FrozenArray<DOMString> names;
};
typedef sequence<any> PropertyValueArray;
interface PropertyNodeList : NodeList {
  PropertyValueArray getValues();
};

partial interface HTMLScriptElement {
  // moved to HTMLOrSVGElement mixin
  attribute DOMString nonce;
};

partial interface HTMLSelectElement {
  // https://github.com/mdn/browser-compat-data/issues/8745
  attribute boolean autofocus;

  undefined blur();
  undefined focus();
};

interface HTMLShadowElement : HTMLElement {
  NodeList getDistributedNodes();
};

partial interface HTMLSourceElement {
  attribute any keySystem;
};

partial interface HTMLStyleElement {
  // https://github.com/whatwg/html/issues/5590
  attribute boolean disabled;

  // moved to HTMLOrSVGElement mixin
  attribute DOMString nonce;

  attribute boolean scoped;
};

partial interface HTMLTableElement {
  attribute boolean sortable;
  undefined stopSorting();
};

partial interface HTMLTextAreaElement {
  // https://github.com/mdn/browser-compat-data/issues/7519
  attribute DOMString autocapitalize;

  // https://github.com/mdn/browser-compat-data/issues/8745
  attribute boolean autofocus;
};

partial interface HTMLVideoElement {
  readonly attribute unsigned long webkitDecodedFrameCount;
  readonly attribute unsigned long webkitDroppedFrameCount;

  // https://docs.microsoft.com/en-us/previous-versions/hh772572(v=vs.85)
  readonly attribute boolean msIsStereo3D;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement#Gecko-specific_properties
  readonly attribute unsigned long mozParsedFrames;
  readonly attribute unsigned long mozDecodedFrames;
  readonly attribute unsigned long mozPresentedFrames;
  readonly attribute unsigned long mozPaintedFrames;
  readonly attribute double mozFrameDelay;
  readonly attribute boolean mozHasAudio;

  // https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/html/HTMLVideoElement.idl?rev=267813#L58
  boolean webkitSupportsPresentationMode(VideoPresentationMode mode);
  readonly attribute VideoPresentationMode webkitPresentationMode;
  undefined webkitSetPresentationMode(VideoPresentationMode mode);

  // https://github.com/WebKit/WebKit/blob/c397d717fcd82a8daff69dccb1354a5f94ca6f9a/Source/WebCore/html/HTMLVideoElement.idl#L50
  attribute boolean webkitWirelessVideoPlaybackDisabled;
};

partial interface ImageBitmapRenderingContext {
  // https://github.com/whatwg/html/pull/1101
  undefined transferImageBitmap(ImageBitmap? bitmap);
};

partial interface MessageEvent {
  // https://github.com/whatwg/html/pull/4009
  readonly attribute UserActivation? userActivation;
};

partial interface Navigator {
  // https://github.com/WebKit/WebKit/blob/88278b55563e5ccdc0b3419c6c391c3becc19e40/Source/WebCore/page/Navigator.idl#L30
  undefined getStorageUpdates();

  // https://github.com/whatwg/html/pull/4009
  [SameObject] readonly attribute UserActivation userActivation;

  // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozIsLocallyAvailable
  boolean mozIsLocallyAvailable(DOMString url, boolean ifOffline);
};

partial interface Plugin {
  readonly attribute DOMString version;
};

partial interface TextTrackCue {
  // https://github.com/WebKit/WebKit/blob/8c5122c3b04d94856c54fb5e686c014a123143f7/Source/WebCore/html/track/TextTrackCue.idl#L48
  DocumentFragment getCueAsHTML();
};

partial interface TextTrackCueList {
   TextTrackCue item(unsigned long index);
};

partial interface TextTrackList {
   TextTrack item(unsigned long index);
};

partial interface VideoTrackList {
   VideoTrack item(unsigned long index);
};

// https://github.com/whatwg/html/pull/4009
[Exposed=(Window,Worker,AudioWorklet)]
interface UserActivation {
  readonly attribute boolean hasBeenActive;
  readonly attribute boolean isActive;
};

partial interface Window {
  long webkitRequestAnimationFrame(FrameRequestCallback callback);
  undefined webkitCancelRequestAnimationFrame(long id);
  undefined webkitCancelAnimationFrame(long id);

  // https://github.com/whatwg/html/issues/2379
  readonly attribute Navigator clientInformation;

  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741363(v=vs.85)
  // https://bugs.chromium.org/p/chromium/issues/detail?id=692835
  attribute DOMString defaultStatus;
  attribute DOMString defaultstatus;

  // https://github.com/whatwg/html/issues/3539
  boolean find(optional DOMString string = "",
               optional boolean caseSensitive = false,
               optional boolean backwards = false,
               optional boolean wrap = false,
               optional boolean wholeWord = false,
               optional boolean searchInFrames = false,
               optional boolean showDialog = false);

  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741479(v=vs.85)
  // https://bugs.chromium.org/p/chromium/issues/detail?id=438370
  readonly attribute boolean offscreenBuffering;

  readonly attribute any dialogArguments;
  undefined getAttention();
  undefined getAttentionWithCycleCount();
  CSSStyleDeclaration getDefaultComputedStyle(Element element, DOMString? pseudoAlt);
  readonly attribute any globalStorage;
  undefined home();
  undefined maximize();
  undefined minimize();
  attribute EventHandler onappinstalled;
  attribute EventHandler onbeforeinstallprompt;
  attribute EventHandler onpaint;
  undefined openDialog();
  attribute object pkcs11;
  any returnValue();
  undefined scrollByLines();
  undefined scrollByPages();
  undefined scrollMaxX();
  undefined scrollMaxY();
  undefined setCursor();
  undefined setResizable();
  undefined showModalDialog();
  object sidebar();
  undefined sizeToContent();
  undefined updateCommands();

  readonly attribute double mozAnimationStartTime;
  readonly attribute double mozInnerScreenX;
  readonly attribute double mozInnerScreenY;
  readonly attribute long long mozPaintCount;
};

partial interface WebSocket {
  readonly attribute USVString URL;
};

partial interface WorkerGlobalScope {
  // https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/dump
  undefined dump(any... data);

  // https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onclose
  attribute EventHandler onclose;
};
