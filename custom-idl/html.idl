// https://github.com/whatwg/html/pull/6153
// https://html.spec.whatwg.org/commit-snapshots/27ca698a224a4fcf59b647be80a0c86c3c6abba5/#applicationcache
[SecureContext, Exposed=Window]
interface ApplicationCache : EventTarget {
  // update status
  const unsigned short UNCACHED = 0;
  const unsigned short IDLE = 1;
  const unsigned short CHECKING = 2;
  const unsigned short DOWNLOADING = 3;
  const unsigned short UPDATEREADY = 4;
  const unsigned short OBSOLETE = 5;
  readonly attribute unsigned short status;

  // updates
  undefined update();
  undefined abort();
  undefined swapCache();

  // events
  attribute EventHandler onchecking;
  attribute EventHandler onerror;
  attribute EventHandler onnoupdate;
  attribute EventHandler ondownloading;
  attribute EventHandler onprogress;
  attribute EventHandler onupdateready;
  attribute EventHandler oncached;
  attribute EventHandler onobsolete;
};

partial interface Window {
  [SecureContext] readonly attribute ApplicationCache applicationCache;
};

// https://github.com/whatwg/html/pull/1942
dictionary HitRegionOptions {
  Path2D? path = null;
  CanvasFillRule fillRule = "nonzero";
  DOMString id = "";
  DOMString? parentID = null;
  DOMString cursor = "inherit";
  // for control-backed regions:
  Element? control = null;
  // for unbacked regions:
  DOMString? label = null;
  DOMString? role = null;
};

// https://github.com/whatwg/html/pull/1225
// https://html.spec.whatwg.org/commit-snapshots/927fda0f305452a9c54a25d3ebf9a6ed5ae29fd3/#htmlmediaelement
// https://html.spec.whatwg.org/commit-snapshots/927fda0f305452a9c54a25d3ebf9a6ed5ae29fd3/#mediacontroller

partial interface HTMLMediaElement {
  [CEReactions] attribute DOMString mediaGroup;
  attribute MediaController? controller;
};

enum MediaControllerPlaybackState { "waiting", "playing", "ended" };
[Exposed=Window]
interface MediaController : EventTarget {
  constructor();

  readonly attribute TimeRanges buffered;
  readonly attribute TimeRanges seekable;
  readonly attribute unrestricted double duration;
  attribute double currentTime;

  readonly attribute boolean paused;
  readonly attribute MediaControllerPlaybackState playbackState;
  readonly attribute TimeRanges played;
  undefined pause();
  undefined unpause();
  undefined play(); // calls play() on all media elements as well

  attribute double defaultPlaybackRate;
  attribute double playbackRate;

  attribute double volume;
  attribute boolean muted;
};

// https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/html/HTMLVideoElement.idl?rev=267813#L63
enum VideoPresentationMode { "inline", "fullscreen", "picture-in-picture" };

// https://github.com/whatwg/html/pull/7874
typedef record<DOMString, any> CanvasFilterInput;

[Exposed=(Window,Worker,PaintWorklet)]
interface CanvasFilter {
  constructor(optional (CanvasFilterInput or sequence<CanvasFilterInput>) filters);
};

partial interface CanvasRenderingContext2D {
  // Non-standard legacy aliases in WebKit/Blink
  // https://chromium.googlesource.com/chromium/src/+/ce07cefc396fdf4016e731b4e75592586785c6b0
  // https://trac.webkit.org/changeset/221605/webkit
  undefined clearShadow();
  undefined drawImageFromRect(HTMLImageElement image, optional unrestricted float sx, optional unrestricted float sy, optional unrestricted float sw, optional unrestricted float sh, optional unrestricted float dx, optional unrestricted float dy, optional unrestricted float dw, optional unrestricted float dh, optional DOMString compositeOperation);
  undefined setAlpha(unrestricted float alpha);
  undefined setCompositeOperation(DOMString compositeOperation);
  undefined setFillColor(DOMString color, optional unrestricted float alpha);
  undefined setFillColor(unrestricted float c, unrestricted float m, unrestricted float y, unrestricted float k, unrestricted float a);
  undefined setFillColor(unrestricted float grayLevel, optional unrestricted float alpha);
  undefined setFillColor(unrestricted float r, unrestricted float g, unrestricted float b, unrestricted float a);
  undefined setLineCap(DOMString cap);
  undefined setLineJoin(DOMString join);
  undefined setLineWidth(unrestricted float width);
  undefined setMiterLimit(unrestricted float limit);
  undefined setStrokeColor(DOMString color, optional unrestricted float alpha);
  undefined setStrokeColor(unrestricted float c, unrestricted float m, unrestricted float y, unrestricted float k, unrestricted float a);
  undefined setStrokeColor(unrestricted float grayLevel, optional unrestricted float alpha);
  undefined setStrokeColor(unrestricted float r, unrestricted float g, unrestricted float b, unrestricted float a);
  undefined setShadow(unrestricted float width, unrestricted float height, unrestricted float blur, optional DOMString color, optional unrestricted float alpha);
  undefined setShadow(unrestricted float width, unrestricted float height, unrestricted float blur, unrestricted float c, unrestricted float m, unrestricted float y, unrestricted float k, unrestricted float a);
  undefined setShadow(unrestricted float width, unrestricted float height, unrestricted float blur, unrestricted float grayLevel, optional unrestricted float alpha);
  undefined setShadow(unrestricted float width, unrestricted float height, unrestricted float blur, unrestricted float r, unrestricted float g, unrestricted float b, unrestricted float a);


  // https://bugzilla.mozilla.org/show_bug.cgi?id=1228850
  attribute boolean mozImageSmoothingEnabled;

  // https://bugzilla.mozilla.org/show_bug.cgi?id=1294362
  attribute DOMString mozTextStyle;

  // https://trac.webkit.org/changeset/96626/webkit
  attribute object webkitLineDash;
  attribute float webkitLineDashOffset;

  // https://trac.webkit.org/changeset/113780/webkit
  readonly attribute float webkitBackingStorePixelRatio;

  // https://trac.webkit.org/changeset/117635/webkit
  attribute boolean webkitImageSmoothingEnabled;
};


// https://hg.mozilla.org/mozilla-central/file/a451ebba378efcce0967e508a8107ab14dd5edcb/dom/webidl/DataTransfer.webidl#l44
partial interface DataTransfer {
  undefined addElement(Element element);
  attribute DOMString mozCursor;
  readonly attribute boolean mozUserCancelled;
  readonly attribute Node? mozSourceNode;
};

dictionary ElementRegistrationOptions {
  object? prototype = null;
  DOMString? extends = null;
};

partial interface Document {
  // https://chromium.googlesource.com/chromium/src.git/+/24e58b0d8fab28fa20e69f191d833fe97aaff75d
  any getCSSCanvasContext(DOMString contextId, DOMString name, long width, long height);

  // https://github.com/whatwg/html/pull/1103
  attribute EventHandler onafterscriptexecute;
  attribute EventHandler onbeforescriptexecute;

  any registerElement(DOMString type, optional ElementRegistrationOptions options = {});
};

partial interface DragEvent {
  undefined initDragEvent();
};

partial interface Element {
  // https://github.com/whatwg/html/issues/667
  attribute EventHandler onsearch;

  // event handler attributes in the wrong place
  attribute EventHandler oncopy;
  attribute EventHandler oncut;
  attribute EventHandler onpaste;
};

partial interface EventSource {
  readonly attribute USVString URL;
};

partial interface mixin GlobalEventHandlers {
  // https://github.com/mozilla/gecko-dev/blob/ffdb6a4d934b3f5294f18cf0e1df618109ccb36b/dom/webidl/EventHandler.webidl#L47
  attribute EventHandler ondragexit;

  // https://github.com/mozilla/gecko-dev/blob/ffdb6a4d934b3f5294f18cf0e1df618109ccb36b/dom/webidl/EventHandler.webidl#L65
  attribute EventHandler onloadend;

  // https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/dom/global_event_handlers.idl;l=76;drc=7a26ab64ceec9a43266fb544ab09adbe641504e3
  attribute EventHandler onmousewheel;

  // https://github.com/whatwg/html/issues/667
  attribute EventHandler onsearch;

  // https://github.com/mozilla/gecko-dev/blob/ffdb6a4d934b3f5294f18cf0e1df618109ccb36b/dom/webidl/EventHandler.webidl#L87
  attribute EventHandler onshow;
};

partial interface HashChangeEvent {
  undefined initHashChangeEvent();
};

partial interface HTMLAnchorElement {
  // https://github.com/whatwg/html/pull/3870
  [CEReactions] attribute DOMString hrefTranslate;
};

partial interface HTMLCanvasElement {
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque
  attribute boolean mozOpaque;
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/html/html_content_element.idl
[Exposed=Window] interface HTMLContentElement : HTMLElement {
  [Reflect] attribute DOMString select;
  NodeList getDistributedNodes();
};

// https://github.com/whatwg/html/issues/4792
[Exposed=Window]
interface HTMLDocument : Document {
};

partial interface HTMLElement {
  attribute HTMLMenuElement? contextMenu;
};

partial interface HTMLFormElement {
  // https://github.com/mdn/browser-compat-data/issues/7519
  attribute DOMString autocapitalize;
};

partial interface HTMLFrameElement {
  // https://github.com/WebKit/WebKit/blob/cdb06d0c41ff04eff8f4c65d1c92c8672b4903a6/Source/WebCore/html/HTMLFrameElement.idl#L36
  Document? getSVGDocument();

  // https://github.com/WebKit/WebKit/blob/cdb06d0c41ff04eff8f4c65d1c92c8672b4903a6/Source/WebCore/html/HTMLFrameElement.idl#L38
  readonly attribute long width;
  readonly attribute long height;

  // https://github.com/WebKit/WebKit/blob/cdb06d0c41ff04eff8f4c65d1c92c8672b4903a6/Source/WebCore/html/HTMLFrameElement.idl#L42
  attribute USVString location;
};

partial interface HTMLFrameSetElement {
  attribute EventHandler onorientationchange;
};

partial interface HTMLHeadElement {
  attribute DOMString profile;
};

partial interface HTMLHtmlElement {
  // https://github.com/WebKit/WebKit/blob/cdb06d0c41ff04eff8f4c65d1c92c8672b4903a6/Source/WebCore/html/HTMLHtmlElement.idl#L24
  attribute DOMString manifest;
};

partial interface HTMLImageElement {
  attribute EventHandler onerror;
};

partial interface HTMLInputElement {
  // https://github.com/mdn/browser-compat-data/issues/7519
  attribute DOMString autocapitalize;

  // https://github.com/whatwg/html/issues/667
  attribute boolean incremental;

  attribute EventHandler onsearch;
  
  // https://github.com/mozilla/gecko-dev/blob/7c03e28b3d065fa80839e9659fd50bf340913d5f/dom/webidl/HTMLInputElement.webidl#L173
  boolean mozIsTextField(boolean excludePassword);

  // https://github.com/mozilla/gecko-dev/blob/7c03e28b3d065fa80839e9659fd50bf340913d5f/dom/webidl/HTMLInputElement.webidl#L154
  readonly attribute long textLength;
};

partial interface HTMLLinkElement {
  // moved to HTMLOrSVGElement mixin
  attribute DOMString nonce;
};

partial interface HTMLMarqueeElement {
  // https://github.com/whatwg/html/pull/6343
  attribute EventHandler onbounce;
  attribute EventHandler onfinish;
  attribute EventHandler onstart;
};

partial interface HTMLMediaElement {
  readonly attribute DOMTokenList controlsList;
  attribute EventHandler onerror;
  Promise<undefined> seekToNextFrame();

  // Chromium extensions
  readonly attribute unsigned long long webkitAudioDecodedByteCount;
  readonly attribute unsigned long long webkitVideoDecodedByteCount;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Obsolete_attributes
  readonly attribute boolean mozAudioCaptured;
  readonly attribute double mozFragmentEnd;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Obsolete_methods
  MediaStream mozCaptureStream();
  MediaStream mozCaptureStreamUntilEnded();
  object mozGetMetadata();

  // Prefixed preservesPitch
  attribute boolean mozPreservesPitch;
  attribute boolean webkitPreservesPitch;

  // https://github.com/WebKit/WebKit/blob/c397d717fcd82a8daff69dccb1354a5f94ca6f9a/Source/WebCore/html/HTMLMediaElement.idl#L99
  readonly attribute boolean webkitHasClosedCaptions;
  attribute boolean webkitClosedCaptionsVisible;

  // https://github.com/WebKit/WebKit/blob/c397d717fcd82a8daff69dccb1354a5f94ca6f9a/Source/WebCore/html/HTMLMediaElement.idl#L124
  undefined webkitShowPlaybackTargetPicker();
  readonly attribute boolean webkitCurrentPlaybackTargetIsWireless;
};

// https://www.w3.org/TR/html51/interactive-elements.html#htmlmenuelement-htmlmenuelement
partial interface HTMLMenuElement {
  attribute DOMString type;
  attribute DOMString label;
};

// https://www.w3.org/TR/html51/interactive-elements.html#htmlmenuitemelement-htmlmenuitemelement
[Exposed=Window]
interface HTMLMenuItemElement : HTMLElement {
  attribute DOMString type;
  attribute DOMString label;
  attribute DOMString icon;
  attribute boolean disabled;
  attribute boolean checked;
  attribute DOMString radiogroup;
  attribute boolean default;
};

partial interface HTMLPreElement {
  // https://github.com/WebKit/WebKit/blob/8c5122c3b04d94856c54fb5e686c014a123143f7/Source/WebCore/html/HTMLPreElement.idl#L29
  attribute boolean wrap;
};

partial interface HTMLScriptElement {
  // moved to HTMLOrSVGElement mixin
  attribute DOMString nonce;
};

partial interface HTMLSelectElement {
  undefined blur();
  undefined focus();
};

[Exposed=Window]
interface HTMLShadowElement : HTMLElement {
  NodeList getDistributedNodes();
};

partial interface HTMLStyleElement {
  // moved to HTMLOrSVGElement mixin
  attribute DOMString nonce;
};

partial interface HTMLTextAreaElement {
  // https://github.com/mdn/browser-compat-data/issues/7519
  attribute DOMString autocapitalize;
};

partial interface HTMLVideoElement {
  readonly attribute unsigned long webkitDecodedFrameCount;
  readonly attribute unsigned long webkitDroppedFrameCount;

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement#Gecko-specific_properties
  readonly attribute unsigned long mozParsedFrames;
  readonly attribute unsigned long mozDecodedFrames;
  readonly attribute unsigned long mozPresentedFrames;
  readonly attribute unsigned long mozPaintedFrames;
  readonly attribute double mozFrameDelay;
  readonly attribute boolean mozHasAudio;

  // https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/html/HTMLVideoElement.idl?rev=267813#L58
  boolean webkitSupportsPresentationMode(VideoPresentationMode mode);
  readonly attribute VideoPresentationMode webkitPresentationMode;
  undefined webkitSetPresentationMode(VideoPresentationMode mode);

  // https://github.com/WebKit/WebKit/blob/c397d717fcd82a8daff69dccb1354a5f94ca6f9a/Source/WebCore/html/HTMLVideoElement.idl#L50
  attribute boolean webkitWirelessVideoPlaybackDisabled;
};

partial interface ImageBitmapRenderingContext {
  // https://github.com/whatwg/html/pull/1101
  undefined transferImageBitmap(ImageBitmap? bitmap);
};

partial interface MessageEvent {
  // https://github.com/whatwg/html/pull/4009
  readonly attribute UserActivation? userActivation;
};

partial interface MouseEvent {
  // https://github.com/whatwg/html/pull/1942
  readonly attribute DOMString? region;
};

partial dictionary MouseEventInit {
  // https://github.com/whatwg/html/pull/1942
  DOMString? region = null;
};

partial interface Navigator {
  // https://github.com/WebKit/WebKit/blob/88278b55563e5ccdc0b3419c6c391c3becc19e40/Source/WebCore/page/Navigator.idl#L30
  undefined getStorageUpdates();

  attribute any authentication;
  readonly attribute DOMString buildID;
  readonly attribute DOMString doNotTrack;
};

partial interface Plugin {
  readonly attribute DOMString version;
};

partial interface TextTrackCue {
  // https://github.com/WebKit/WebKit/blob/8c5122c3b04d94856c54fb5e686c014a123143f7/Source/WebCore/html/track/TextTrackCue.idl#L48
  DocumentFragment getCueAsHTML();
};

partial interface TextTrackCueList {
   TextTrackCue item(unsigned long index);
};

partial interface TextTrackList {
   TextTrack item(unsigned long index);
};

partial interface VideoTrackList {
   VideoTrack item(unsigned long index);
};

partial interface Window {
  long webkitRequestAnimationFrame(FrameRequestCallback callback);
  undefined webkitCancelRequestAnimationFrame(long id);
  undefined webkitCancelAnimationFrame(long id);

  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741363(v=vs.85)
  // https://bugs.chromium.org/p/chromium/issues/detail?id=692835
  attribute DOMString defaultStatus;
  attribute DOMString defaultstatus;

  // https://github.com/whatwg/html/issues/3539
  boolean find(optional DOMString string = "",
               optional boolean caseSensitive = false,
               optional boolean backwards = false,
               optional boolean wrap = false,
               optional boolean wholeWord = false,
               optional boolean searchInFrames = false,
               optional boolean showDialog = false);

  // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741479(v=vs.85)
  // https://bugs.chromium.org/p/chromium/issues/detail?id=438370
  readonly attribute boolean offscreenBuffering;

  CSSStyleDeclaration getDefaultComputedStyle(Element element, DOMString? pseudoAlt);
  undefined scrollByLines();
  undefined scrollByPages();
  undefined scrollMaxX();
  undefined scrollMaxY();
  undefined setResizable();
  undefined showModalDialog();
  undefined sizeToContent();
  undefined updateCommands();

  readonly attribute double mozInnerScreenX;
  readonly attribute double mozInnerScreenY;
};

partial interface WebSocket {
  readonly attribute USVString URL;
};

partial interface WorkerGlobalScope {
  // https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/dump
  undefined dump(any... data);
};
