// Manually maintained definitions for features not in any specification, like
// non-standard features and features that have been removed or renamed.

partial interface Document {
  // https://www.w3.org/Bugs/Public/show_bug.cgi?id=27626
  Range caretRangeFromPoint(optional long x = 0, optional long y = 0);

  Promise<boolean> hasTrustToken(USVString issuer);

  readonly attribute DOMString webkitVisibilityState;
  readonly attribute boolean webkitHidden;

  attribute EventHandler onbeforecopy;
  attribute EventHandler onbeforecut;
  attribute EventHandler onbeforepaste;
  attribute EventHandler onsearch;

  boolean contains();
  readonly attribute nsIURI documentURIObject;
  void enableStyleSheetsForSet(DOMString? name);
  boolean execCommandShowHelp(DOMString name);
  readonly attribute long fileSize;
  nsIBoxObject getBoxObjectFor(DOMElement element);
  readonly attribute long height;
  readonly attribute DOMString? lastStyleSheetSet;
  void loadOverlay(DOMString url, nsIObserver observer);
  void mozSetImageElement(DOMString imageElementId, DOMElement imageElement);
  readonly attribute boolean mozSyntheticDocument;
  attribute EventHandler onafterscriptexecute;
  attribute EventHandler onbeforescriptexecute;
  readonly attribute DOMString? origin;
  readonly attribute Node? popupNode;
  readonly attribute DOMString? preferredStyleSheetSet;
  void queryCommandText();
  void releaseCapture();
  void routeEvent();
  readonly attribute DOMString? selectedStyleSheetSet;
  readonly attribute FrozenArray<DOMElement> styleSheetSets;
  readonly attribute XULTooltip tooltipNode;
  readonly attribute long width;
};

partial interface Element {
  attribute EventHandler onbeforecopy;
  attribute EventHandler onbeforecut;
  attribute EventHandler onbeforepaste;
  attribute EventHandler onsearch;
  attribute EventHandler onbeforematch;

  readonly attribute DOMString? accessKey;
  readonly attribute DOMString? attributeStyleMap;
  readonly attribute DOMString? currentStyle;
  readonly attribute DOMString? name;

  readonly attribute DOMString? runtimeStyle;
  readonly attribute Number? scrollLeftMax;
  void setCapture(optional boolean retargetToElement);
  readonly attribute boolean tabStop;
};

partial interface Event {
  readonly attribute Element? explicitOriginalTarget;
  boolean getPreventDefault();
  readonly attribute Element? originalTarget;
  attribute boolean preventBubble;
  attribute boolean preventCapture;
};

partial interface Window {
  boolean find(optional DOMString string = "",
               optional boolean caseSensitive = false,
               optional boolean backwards = false,
               optional boolean wrap = false,
               optional boolean wholeWord = false,
               optional boolean searchInFrames = false,
               optional boolean showDialog = false);
  readonly attribute boolean offscreenBuffering;
  attribute DOMString defaultStatus;
  attribute DOMString defaultstatus;

  attribute EventHandler onsearch;
};

partial interface DataTransfer {
  attribute DOMString mozCursor;
  readonly attribute Node mozSourceNode;
  readonly attribute boolean mozUserCancelled;
  readonly attribute number mozItemCount;

  void mozClearDataAt(optional string type, unsigned long index);
  nsIVariant mozGetDataAt(optional string type, unsigned long index);
  void mozSetDataAt(optional string type, nsIVariant data, unsigned long index);
  nsIVariant mozTypesAt(unsigned long index);
};

[Exposed=Window]
interface BlobBuilder {};

[SecureContext]
interface mixin CredentialUserData {
  readonly attribute USVString name;
  readonly attribute USVString iconURL;
};

Credential includes CredentialUserData;

partial interface CSSStyleDeclaration {
  CSSValue getPropertyCSSValue(DOMString property);
};

partial interface DataTransfer {
  void addElement(Element el);
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/css/cssom/css_position_value.idl;drc=c2e7d4f0b24814b0d1c51a964db34ec5b4930756

[Exposed=(Window,LayoutWorklet,PaintWorklet)]
interface CSSPositionValue : CSSStyleValue {
  constructor(CSSNumericValue x, CSSNumericValue y);
  attribute CSSNumericValue x;
  attribute CSSNumericValue y;
};

// https://www.w3.org/TR/DOM-Level-2-Style/css.html

[Exposed=Window]
interface CSSPrimitiveValue : CSSValue {
  const unsigned short CSS_UNKNOWN = 0;
  const unsigned short CSS_NUMBER = 1;
  const unsigned short CSS_PERCENTAGE = 2;
  const unsigned short CSS_EMS = 3;
  const unsigned short CSS_EXS = 4;
  const unsigned short CSS_PX = 5;
  const unsigned short CSS_CM = 6;
  const unsigned short CSS_MM = 7;
  const unsigned short CSS_IN = 8;
  const unsigned short CSS_PT = 9;
  const unsigned short CSS_PC = 10;
  const unsigned short CSS_DEG = 11;
  const unsigned short CSS_RAD = 12;
  const unsigned short CSS_GRAD = 13;
  const unsigned short CSS_MS = 14;
  const unsigned short CSS_S = 15;
  const unsigned short CSS_HZ = 16;
  const unsigned short CSS_KHZ = 17;
  const unsigned short CSS_DIMENSION = 18;
  const unsigned short CSS_STRING = 19;
  const unsigned short CSS_URI = 20;
  const unsigned short CSS_IDENT = 21;
  const unsigned short CSS_ATTR = 22;
  const unsigned short CSS_COUNTER = 23;
  const unsigned short CSS_RECT = 24;
  const unsigned short CSS_RGBCOLOR = 25;

  readonly attribute unsigned short primitiveType;
  void setFloatValue(unsigned short unitType, float floatValue);
  float getFloatValue(unsigned short unitType);
  void setStringValue(unsigned short stringType, DOMString stringValue);
  DOMString getStringValue();
  Counter getCounterValue();
  Rect getRectValue();
  RGBColor getRGBColorValue();
};

[Exposed=Window]
interface CSSValue {
  const unsigned short CSS_INHERIT = 0;
  const unsigned short CSS_PRIMITIVE_VALUE = 1;
  const unsigned short CSS_VALUE_LIST = 2;
  const unsigned short CSS_CUSTOM = 3;

  attribute DOMString cssText;
  readonly attribute unsigned short cssValueType;
};

[Exposed=Window]
interface CSSValueList : CSSValue {
  readonly attribute unsigned long length;
  CSSValue item(unsigned long index);
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/animation/css/css_transition.idl;drc=d692c061c5a4f07611af04d53a032c8ac4dde7c5

[Exposed=Window]
interface CSSTransition : Animation {
  constructor();
  readonly attribute CSSOMString transitionProperty;
};

// https://searchfox.org/mozilla-central/rev/2f9eacd9d3d995c937b4251a5557d95d494c9be1/dom/webidl/DeviceLightEvent.webidl

[Exposed=Window]
interface DeviceLightEvent : Event {
  constructor(DOMString type, optional DeviceLightEventInit eventInitDict = {});
  readonly attribute unrestricted double value;
};

dictionary DeviceLightEventInit : EventInit {
  unrestricted double value = Infinity;
};

// https://searchfox.org/mozilla-central/rev/2f9eacd9d3d995c937b4251a5557d95d494c9be1/dom/webidl/DeviceProximityEvent.webidl

[Exposed=Window]
interface DeviceProximityEvent : Event {
  constructor(DOMString type, optional DeviceProximityEventInit eventInitDict = {});
  readonly attribute double value;
  readonly attribute double min;
  readonly attribute double max;
};

dictionary DeviceProximityEventInit : EventInit {
  unrestricted double value = Infinity;
  unrestricted double min = -Infinity;
  unrestricted double max = Infinity;
};
