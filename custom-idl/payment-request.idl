
// https://github.com/w3c/payment-request/pull/955
dictionary AddressErrors {
  DOMString addressLine;
  DOMString city;
  DOMString country;
  DOMString dependentLocality;
  DOMString organization;
  DOMString phone;
  DOMString postalCode;
  DOMString recipient;
  DOMString region;
  DOMString sortingCode;
};

// https://github.com/w3c/payment-request/pull/955
[SecureContext, Exposed=(Window)]
interface PaymentAddress {
  [Default] object toJSON();
  readonly attribute DOMString city;
  readonly attribute DOMString country;
  readonly attribute DOMString dependentLocality;
  readonly attribute DOMString organization;
  readonly attribute DOMString phone;
  readonly attribute DOMString postalCode;
  readonly attribute DOMString recipient;
  readonly attribute DOMString region;
  readonly attribute DOMString sortingCode;
  readonly attribute FrozenArray<DOMString> addressLine;

  // https://github.com/w3c/payment-request/pull/765
  readonly attribute DOMString languageCode;

  // https://github.com/w3c/payment-request/pull/823
  readonly attribute DOMString regionCode;
};

partial interface PaymentRequest {
  // https://github.com/w3c/payment-request/pull/931
  [NewObject] Promise<boolean> hasEnrolledInstrument();

  readonly attribute PaymentAddress? paymentAddress;
  readonly attribute DOMString requestId;
};

// https://github.com/w3c/payment-request/pull/929
[SecureContext, Exposed=Window]
interface MerchantValidationEvent : Event {
  constructor(DOMString type, optional MerchantValidationEventInit eventInitDict = {});
  readonly attribute DOMString methodName;
  readonly attribute USVString validationURL;
  undefined complete(Promise<any> merchantSessionPromise);
};

dictionary MerchantValidationEventInit : EventInit {
  DOMString methodName = "";
  USVString validationURL = "";
};

partial interface PaymentRequest {
  attribute EventHandler onmerchantvalidation;
};

partial interface HTMLIFrameElement {
  attribute boolean allowPaymentRequest;
};

partial interface PaymentRequest {
  // Original constructor was:
  // constructor(sequence<PaymentMethodData> methodData, PaymentDetailsInit details, optional PaymentOptions options = {});

  // https://github.com/w3c/payment-request/pull/955
  readonly attribute PaymentAddress? shippingAddress;
  readonly attribute DOMString? shippingOption;
  readonly attribute PaymentShippingType? shippingType;

  attribute EventHandler onshippingaddresschange;
  attribute EventHandler onshippingoptionchange;
};

partial dictionary PaymentDetailsBase {
  sequence<PaymentShippingOption> shippingOptions;
};

partial dictionary PaymentDetailsUpdate {
  DOMString error;
  AddressErrors shippingAddressErrors;
  PayerErrors payerErrors;
};

enum PaymentShippingType {
  "shipping",
  "delivery",
  "pickup"
};

dictionary PaymentOptions {
  boolean requestPayerName = false;
  boolean requestBillingAddress = false;
  boolean requestPayerEmail = false;
  boolean requestPayerPhone = false;
  boolean requestShipping = false;
  PaymentShippingType shippingType = "shipping";
};

dictionary AddressInit {
  DOMString country = "";
  sequence<DOMString> addressLine = [];
  DOMString region = "";
  DOMString city = "";
  DOMString dependentLocality = "";
  DOMString postalCode = "";
  DOMString sortingCode = "";
  DOMString organization = "";
  DOMString recipient = "";
  DOMString phone = "";
};

dictionary PaymentShippingOption {
  required DOMString id;
  required DOMString label;
  required PaymentCurrencyAmount amount;
  boolean selected = false;
};

partial interface PaymentResponse {
  // https://github.com/w3c/payment-request/pull/955
  readonly attribute PaymentAddress? shippingAddress;
  readonly attribute DOMString? shippingOption;
  readonly attribute DOMString? payerName;
  readonly attribute DOMString? payerEmail;
  readonly attribute DOMString? payerPhone;
  attribute EventHandler onpayerdetailchange;
};

partial dictionary PaymentValidationErrors {
  PayerErrors payer;
  AddressErrors shippingAddress;
};

dictionary PayerErrors {
  DOMString email;
  DOMString name;
  DOMString phone;
};
