// https://trac.webkit.org/changeset/267065/webkit
partial interface AudioBuffer {
  attribute unrestricted float gain;
};

// https://trac.webkit.org/changeset/150905/webkit
// https://trac.webkit.org/changeset/205065/webkit
partial interface AudioBufferSourceNode {
  attribute boolean looping;
  undefined noteOn(double when);
  undefined noteGrainOn(double when, double grainOffset, double grainDuration);
  undefined noteOff(double when);

  // https://trac.webkit.org/changeset/265245/webkit
  readonly attribute AudioParam gain;
  readonly attribute unsigned short playbackState;
};

// https://chromium.googlesource.com/chromium/src/+/9848564877f0057f4dcbc98bce061dfa17a9202c
partial interface AudioListener {
  attribute float dopplerFactor;
  attribute float speedOfSound;
  undefined setVelocity(float x, float y, float z);
};

partial interface AudioParam {
  undefined setTargetValueAtTime(float targetValue, float time, float timeConstant);
  // https://chromium.googlesource.com/chromium/src/+/4260025dd80eed380e0c1fff0e4be2bdd0ae0e8a
  // https://chromium.googlesource.com/chromium/src/+/f5e8986bdcd359c7ca82d83907c81642dd01f55e
  AudioParam cancelValuesAndHoldAtTime(double startTime);

  // https://trac.webkit.org/changeset/266763/webkit
  readonly attribute DOMString name;
  readonly attribute unsigned short units;
};

partial interface BiquadFilterNode {
  const unsigned short LOWPASS = 0;
  const unsigned short HIGHPASS = 1;
  const unsigned short BANDPASS = 2;
  const unsigned short LOWSHELF = 3;
  const unsigned short HIGHSHELF = 4;
  const unsigned short PEAKING = 5;
  const unsigned short NOTCH = 6;
  const unsigned short ALLPASS = 7;
};

partial interface MediaStreamTrackAudioSourceNode {
  readonly attribute any mediaStreamTrack;
};

partial interface OscillatorNode {
  const unsigned short SINE = 0;
  const unsigned short SQUARE = 1;
  const unsigned short SAWTOOTH = 2;
  const unsigned short TRIANGLE = 3;
  const unsigned short CUSTOM = 4;

  undefined noteOn(double when);
  undefined noteOff(double when);
};

partial interface PannerNode {
  const unsigned short EQUALPOWER = 0;
  const unsigned short HRTF = 1;
  const unsigned short SOUNDFIELD = 2;
  const unsigned short LINEAR_DISTANCE = 0;
  const unsigned short INVERSE_DISTANCE = 1;
  const unsigned short EXPONENTIAL_DISTANCE = 2;

  // https://chromium.googlesource.com/chromium/src/+/9848564877f0057f4dcbc98bce061dfa17a9202c
  undefined setVelocity(float x, float y, float z);
};

[Exposed=Window]
interface webkitAudioContext : EventTarget {
  constructor();

  // https://github.com/WebKit/WebKit/blob/3a0fbaf18766c2d42757e3926687ed4676d0aacd/Source/WebCore/Modules/webaudio/WebKitAudioContext.idl#L56
  readonly attribute unsigned long activeSourceCount;
};

[Exposed=Window]
interface webkitOfflineAudioContext : webkitAudioContext {
  constructor(unsigned long numberOfChannels, unsigned long length, float sampleRate);
};

[Exposed=Window]
interface webkitAudioPannerNode : AudioNode {
};
