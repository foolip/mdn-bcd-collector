// https://www.khronos.org/registry/webgl/extensions/

interface ANGLE_instanced_arrays {
  const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
  void drawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
  void drawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei primcount);
  void vertexAttribDivisorANGLE(GLuint index, GLuint divisor);
};

interface EXT_blend_minmax {
  const GLenum MIN_EXT = 0x8007;
  const GLenum MAX_EXT = 0x8008;
};

interface EXT_color_buffer_float {};

interface EXT_color_buffer_half_float {
  const GLenum RGBA16F_EXT = 0x881A;
  const GLenum RGB16F_EXT = 0x881B;
  const GLenum FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211;
  const GLenum UNSIGNED_NORMALIZED_EXT = 0x8C17;
};

interface EXT_disjoint_timer_query {
  const GLenum QUERY_COUNTER_BITS_EXT = 0x8864;
  const GLenum CURRENT_QUERY_EXT = 0x8865;
  const GLenum QUERY_RESULT_EXT = 0x8866;
  const GLenum QUERY_RESULT_AVAILABLE_EXT = 0x8867;
  const GLenum TIME_ELAPSED_EXT = 0x88BF;
  const GLenum TIMESTAMP_EXT = 0x8E28;
  const GLenum GPU_DISJOINT_EXT = 0x8FBB;

  WebGLTimerQueryEXT? createQueryEXT();
  void deleteQueryEXT(WebGLTimerQueryEXT? query);
  boolean isQueryEXT(WebGLTimerQueryEXT? query);
  void beginQueryEXT(GLenum target, WebGLTimerQueryEXT query);
  void endQueryEXT(GLenum target);
  void queryCounterEXT(WebGLTimerQueryEXT query, GLenum target);
  any getQueryEXT(GLenum target, GLenum pname);
  any getQueryObjectEXT(WebGLTimerQueryEXT query, GLenum pname);
};

interface EXT_float_blend {};
interface EXT_frag_depth {};
interface EXT_shader_texture_lod {};

interface EXT_sRGB {
  const GLenum SRGB_EXT = 0x8C40;
  const GLenum SRGB_ALPHA_EXT = 0x8C42;
  const GLenum SRGB8_ALPHA8_EXT = 0x8C43;
  const GLenum FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210;
};

interface EXT_texture_compression_bptc {
  const GLenum COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C;
  const GLenum COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D;
  const GLenum COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E;
  const GLenum COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F;
};

interface EXT_texture_compression_rgtc {
  const GLenum COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
  const GLenum COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
  const GLenum COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
  const GLenum COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
};

interface EXT_texture_filter_anisotropic {
  const GLenum TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
  const GLenum MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
};
