api:
  __resources:
    audio-blip:
      type: audio
      src:
        - /media/blip.mp3
        - /media/blip.ogg
    video-blank:
      type: video
      src:
        - /media/blank.mp4
        - /media/blank.webm
      subtitles:
        - label: English
          lang: en
          src: /media/subtitles.vtt
    image-black:
      type: image
      src: /media/black.png
    audioContext:
      type: instance
      src: >-
        var constructor = (window.AudioContext || window.webkitAudioContext);
        if (!constructor) {
          return false;
        }
        return new constructor();
    createStyleSheet:
      type: instance
      src: >-
        return function(css) {
          var el = document.createElement('style');
          el.innerHTML = css;
          document.head.appendChild(el);
          el.sheet.disabled = true;
          return el.sheet;
        }
    offlineAudioContext:
      type: instance
      src: >-
        var constructor = (window.OfflineAudioContext ||
        window.webkitOfflineAudioContext);
        if (!constructor) {
          return false;
        }
        return new constructor(2,44100*40,44100);
    speechRecognition:
      type: instance
      src: >-
        var constructor = (window.SpeechRecognition ||
        window.webkitSpeechRecognition);
        if (!constructor) {
          return false;
        }
        return new constructor();
    webGL:
      type: instance
      src: >-
        var canvas = document.createElement('canvas');
        if (!canvas) {
          return false;
        };
        return canvas.getContext('webgl2') || canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    webGL1:
      type: instance
      src: >-
        var canvas = document.createElement('canvas');
        if (!canvas) {
          return false;
        };
        return canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    webGL2:
      type: instance
      src: >-
        var canvas = document.createElement('canvas');
        if (!canvas) {
          return false;
        };
        return canvas.getContext('webgl2');

  Attr:
    __base: >-
      var el = document.createElement('b');
      el.setAttribute('data-foo', 'bar');
      var instance = el.getAttributeNode('data-foo');
  ANGLE_instanced_arrays:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('ANGLE_instanced_arrays');
    __test: return !!instance;
  AnalyserNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createAnalyser();
  AnimationEvent:
    __base: >-
      var instance;
      try {
        instance = new AnimationEvent('animationend');
      } catch(e) {
        instance = document.createEvent('AnimationEvent');
      }
  ApplicationCache:
    __base: var instance = window.applicationCache;
  AudioBuffer:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createBuffer(2, reusableInstances.audioContext.sampleRate * 3, reusableInstances.audioContext.sampleRate);
  AudioBufferSourceNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createBufferSource();
  AudioContext:
    __resources:
      - audioContext
    __base: var instance = reusableInstances.audioContext;
    __test: return 'AudioContext' in self
  AudioDestinationNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.destination;
  AudioListener:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.listener;
  AudioNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createAnalyser();
  AudioParam:
    __resources:
      - audioContext
    __base: <%api.GainNode:gainNode%> var instance = gainNode.gain;
  AudioProcessingEvent:
    __base: >-
      var instance;
      try {
        instance = new AudioProcessingEvent('');
      } catch(e) {
        instance = document.createEvent('AudioProcessingEvent');
      }
  AudioScheduledSourceNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createBufferSource();
    __test: return 'AudioScheduledSourceNode' in self
  AudioTrack:
    __resources:
      - audio-blip
    __base: <%api.AudioTrackList:audioTracks%> var instance = audioTracks[0];
  AudioTrackList:
    __resources:
      - audio-blip
    __base: >-
      var el = document.getElementById('resource-audio-blip');
      var instance = el.audioTracks;
  AudioWorkletNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      if
      (!reusableInstances.audioContext.audioWorklet) {
        return false;
      }
      var promise = reusableInstances.audioContext.audioWorklet.addModule('/resources/custom-tests/api/AudioWorkletNode/WhiteNoiseProcessor.js').then(
        function() {
          return new AudioWorkletNode(reusableInstances.audioContext, 'white-noise-processor')
        }
      );
      promise.then(function() {});
  BarProp:
    __base: var instance = window.toolbar;
  BaseAudioContext:
    __resources:
      - audioContext
    __base: var instance = reusableInstances.audioContext;
    __test: return 'BaseAudioContext' in self
    __additional:
      decodeAudioData.promise_syntax: >-
        <%api.BaseAudioContext:ctx%>
        return ctx.decodeAudioData.length === 1;
  # BatteryManager: # This promise seems to remain pending when running all tests
  #   __base: var promise = navigator.getBattery();
  BeforeUnloadEvent:
    __base: var instance = document.createEvent('BeforeUnloadEvent');
  BiquadFilterNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createBiquadFilter();
  Blob:
    __base: >-
      var instance;
      try {
        instance = new Blob();
      } catch(e) {
        instance = new BlobBuilder();
      }
  CacheStorage:
    __base: >-
      if (!('caches' in self)) {
        return false;
      };
      var instance = caches;
  CanvasPattern:
    __resources:
      - image-black
    __base: >-
      <%api.CanvasRenderingContext2D:canvas%>
      var instance = canvas.createPattern(document.getElementById('resource-image-black'), 'repeat');
  CanvasRenderingContext2D:
    __base: >-
      var canvas = document.createElement('canvas');
      if (!canvas) {
        return false;
      };
      var instance = canvas.getContext('2d');
    __additional:
      drawImage.SVGImageElement_source_image: >-
        <%api.CanvasRenderingContext2D:canvas%>
        <%api.SVGImageElement:image%>
        canvas.drawImage(image, 0, 0);
        return true;
  ChannelMergerNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createChannelMerger();
  ChannelSplitterNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createChannelSplitter();
  CharacterData:
    __base: <%api.Text:instance%>
  CloseEvent:
    __base: >-
      var instance;
      try {
        instance = new CloseEvent('');
      } catch(e) {
        instance = document.createEvent('CloseEvent');
      }
  CompositionEvent:
    __base: >-
      var instance;
      try {
        instance = new CompositionEvent('');
      } catch(e) {
        instance = document.createEvent('CompositionEvent');
      }
  ConstantSourceNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createConstantSource();
  ConvolverNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createConvolver();
  Crypto:
    __base: >-
      if (!('crypto' in self)) {
        return false;
      };
      var instance = crypto;
  CryptoKey:
    __base: >-
      <%api.SubtleCrypto:subtlecrypto%>
      var promise = subtlecrypto.generateKey({
        name: 'RSA-OAEP',
        modulusLength: 4096,
        publicExponent: new Uint8Array([1, 0, 1]),
        hash: 'SHA-256'
      }, true, ['encrypt', 'decrypt']);
  CSSConditionRule:
    __resources:
      - createStyleSheet
    __base: <%api.CSSMediaRule:instance%>
  CSSCounterStyleRule:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@counter-style thumbs {system: cyclic; symbols: "👍"; suffix: " ";}');
      var instance = stylesheet.cssRules.item(0);
  CSSFontFaceRule:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@font-face {font-family: somefont; src: url(somefont.ttf);}');
      var instance = stylesheet.cssRules.item(0);
  CSSFontFeatureValuesRule:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@font-feature-values Font {@styleset {nice-style: 12;}}');
      var instance = stylesheet.cssRules.item(0);
  CSSGroupingRule:
    __resources:
      - createStyleSheet
    __base: <%api.CSSMediaRule:instance%>
  CSSImportRule:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@import url(/resources/style.css);');
      var instance = stylesheet.cssRules.item(0);
  CSSKeyframeRule:
    __resources:
      - createStyleSheet
    __base: >-
      <%api.CSSKeyframesRule:keyframes%>
      var instance = keyframes.cssRules.item(0);
  CSSKeyframesRule:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@keyframes test {0% {
      top: 0 } 100% { top: 100px; }} @-webkit-keyframes test {0% { top: 0 } 100% { top: 100px; }} @-moz-keyframes test {0% { top: 0 } 100% { top: 100px; }} @-o-keyframes test {0% { top: 0 } 100% { top: 100px; }}');
      var instance = stylesheet.cssRules.item(0);
  CSSMediaRule:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@media (max-width: 600px) {body {background-color: #111;color: white;}}');
      var instance = stylesheet.cssRules.item(0);
  CSSPageRule:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@page {margin: 1cm;}');
      var instance = stylesheet.cssRules.item(0);
  CSSRule:
    __resources:
      - createStyleSheet
    __base: >-
      <%api.CSSRuleList:cssRules%>
      var instance = cssRules.item(0);
  CSSRuleList:
    __resources:
      - createStyleSheet
    __base: >-
      <%api.CSSStyleSheet:stylesheet%>
      var instance = stylesheet.cssRules;
  CSSStyleDeclaration:
    __base: >-
      var el = document.createElement('b');
      var instance = el.style;
  CSSStyleRule:
    __resources:
      - createStyleSheet
    __base: <%api.CSSRule:instance%>
  CSSStyleSheet:
    __resources:
      - createStyleSheet
    __base: "var instance = reusableInstances.createStyleSheet('p {color: red;}');"
  CSSSupportsRule:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@supports (display: grid) {div {display: grid;}}');
      var instance = stylesheet.cssRules.item(0);
  CSSViewportRule:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@viewport {width: 100vw;}');
      var instance = stylesheet.cssRules.item(0);
  CustomEvent:
    __base: >-
      var instance;
      try {
        instance = new CustomEvent('custom');
      } catch(e) {
        instance = document.createEvent('CustomEvent');
      }
  DelayNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createDelay();
  DeviceMotionEvent:
    __base: >-
      var instance;
      try {
        instance = new DeviceMotionEvent('');
      } catch(e) {
        instance = document.createEvent('DeviceMotionEvent');
      }
  DeviceOrientationEvent:
    __base: >-
      var instance;
      try {
        instance = new DeviceOrientationEvent('');
      } catch(e) {
        instance = document.createEvent('DeviceOrientationEvent');
      }
  Document:
    __base: var instance = document;
    __additional:
      createElement.options: >-
        <%api.Document:d%>
        return !!d.createElement('span', {});
      createElementNS.options: >-
        <%api.Document:d%>
        return !!d.createElement('span', {});
      documentURI.readonly: >-
        <%api.Document:d%>
        var orig = d.documentURI;
        try {
          d.documentURI = 'http://example.org/';
          return d.documentURI === orig;
        } catch(e) {
          return e instanceof TypeError;
        }
  DocumentFragment:
    __base: var instance = document.createDocumentFragment();
  DocumentType:
    __base: var instance = document.doctype;
  DOMError:
    __base: var instance = new DOMError('name');
  DOMException:
    __base: >-
      var instance;
      try {
        document.createElement('1');
      } catch (e) {
        instance = e;
      }
  DOMImplementation:
    __base: var instance = document.implementation;
  DOMRectList:
    __base: >-
      <%api.Element:el%> if (!el.getClientRects) {
        return false;
      }
      var instance = el.getClientRects();
  DOMTokenList:
    __additional:
      trim_whitespace: >-
        var elm = document.createElement('b');
        elm.className = ' foo bar foo ';
        elm.classList.remove('bar');
        return elm.className === 'foo foo' || elm.className === 'foo';
      remove_duplicates: >-
        var elm = document.createElement('b');
        elm.className = ' foo bar foo ';
        elm.classList.remove('bar');
        return elm.className === 'foo';
  DragEvent:
    __base: >-
      var instance;
      try {
        instance = new DragEvent('');
      } catch(e) {
        instance = document.createEvent('DragEvent');
      }
  DynamicsCompressorNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createDynamicsCompressor();
  Element:
    __base: >-
      var instance;
      try {
        instance = document.createElementNS('', 'el');
      } catch(e) {
        instance = document.createElement('b');
      }
  ErrorEvent:
    __base: >-
      var instance;
      try {
        instance = new ErrorEvent('');
      } catch(e) {
        instance = document.createEvent('ErrorEvent');
      }
  Event:
    __base: >-
      var instance;
      try {
        instance = new Event('type');
      } catch(e) {
        instance = document.createEvent('Event');
      }
  EventSource:
    __base: var instance = new EventSource('/eventstream');
  EXT_blend_minmax:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('EXT_blend_minmax');
  EXT_clip_cull_distance:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('EXT_clip_cull_distance');
  EXT_color_buffer_float:
    __resources:
      - webGL2
    __base: >-
      if (!reusableInstances.webGL2) {
        return false;
      };
      var instance = reusableInstances.webGL2.getExtension('EXT_color_buffer_float');
  EXT_color_buffer_half_float:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('EXT_color_buffer_half_float');
  EXT_disjoint_timer_query:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('EXT_disjoint_timer_query');
  EXT_disjoint_timer_query_webgl2:
    __resources:
      - webGL2
    __base: >-
      if (!reusableInstances.webGL2) {
        return false;
      };
      var instance = reusableInstances.webGL2.getExtension('EXT_disjoint_timer_query_webgl2');
  EXT_float_blend:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('EXT_float_blend');
  EXT_frag_depth:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('EXT_frag_depth');
  EXT_shader_texture_lod:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('EXT_shader_texture_lod');
  EXT_sRGB:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('EXT_sRGB');
  EXT_texture_compression_bptc:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('EXT_texture_compression_bptc');
  EXT_texture_compression_rgtc:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('EXT_texture_compression_rgtc');
  EXT_texture_filter_anisotropic:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('EXT_texture_filter_anisotropic');
  EXT_texture_norm16:
    __resources:
      - webGL2
    __base: >-
      if (!reusableInstances.webGL2) {
        return false;
      };
      var instance = reusableInstances.webGL2.getExtension('EXT_texture_norm16');
  ExtendableEvent:
    __base: var instance = new ExtendableEvent('');
  External:
    __base: var instance = window.external;
  FetchEvent:
    __base: var instance = new FetchEvent('');
  FocusEvent:
    __base: >-
      var instance;
      try {
        instance = new FocusEvent('');
      } catch(e) {
        instance = document.createEvent('FocusEvent');
      }
  FontFace:
    __base: var instance = new FontFace('Material Design Icons', 'url(/fonts/materialdesignicons-webfont.woff)');
  FontFaceSetLoadEvent:
    __base: var instance = new FontFaceSetLoadEvent('');
  GainNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createGain();
  GamepadEvent:
    __base: var instance = new GamepadEvent('');
  HashChangeEvent:
    __base: >-
      var instance;
      try {
        instance = new HashChangeEvent('');
      } catch(e) {
        instance = document.createEvent('HashChangeEvent');
      }
  History:
    __base: var instance = history;
  HTMLAllCollection:
    __base: var instance = document.all;
    __test: return bcd.testObjectName(instance, 'HTMLAllCollection');
  HTMLAnchorElement:
    __base: var instance = document.createElement('a');
    __test: return bcd.testObjectName(instance, 'HTMLAnchorElement');
  HTMLAreaElement:
    __base: var instance = document.createElement('area');
    __test: return bcd.testObjectName(instance, 'HTMLAreaElement');
  HTMLAudioElement:
    __base: var instance = document.createElement('audio');
    __test: return bcd.testObjectName(instance, 'HTMLAudioElement');
  HTMLBaseElement:
    __base: var instance = document.createElement('base');
    __test: return bcd.testObjectName(instance, 'HTMLBaseElement');
  HTMLBaseFontElement:
    __base: var instance = document.createElement('basefont');
    __test: return bcd.testObjectName(instance, 'HTMLBaseFontElement');
  HTMLBodyElement:
    __base: var instance = document.createElement('body');
    __test: return bcd.testObjectName(instance, 'HTMLBodyElement');
  HTMLBRElement:
    __base: var instance = document.createElement('br');
    __test: return bcd.testObjectName(instance, 'HTMLBRElement');
  HTMLButtonElement:
    __base: var instance = document.createElement('button');
    __test: return bcd.testObjectName(instance, 'HTMLButtonElement');
  HTMLCanvasElement:
    __base: var instance = document.createElement('canvas');
    __test: return bcd.testObjectName(instance, 'HTMLCanvasElement');
  HTMLCollection:
    __base: var instance = document.forms;
  HTMLContentElement:
    __base: var instance = document.createElement('content');
    __test: return bcd.testObjectName(instance, 'HTMLContentElement');
  HTMLDataElement:
    __base: var instance = document.createElement('data');
    __test: return bcd.testObjectName(instance, 'HTMLDataElement');
  HTMLDataListElement:
    __base: var instance = document.createElement('datalist');
    __test: return bcd.testObjectName(instance, 'HTMLDataListElement');
  HTMLDetailsElement:
    __base: var instance = document.createElement('details');
    __test: return bcd.testObjectName(instance, 'HTMLDetailsElement');
  HTMLDialogElement:
    __base: var instance = document.createElement('dialog');
    __test: return bcd.testObjectName(instance, 'HTMLDialogElement');
  HTMLDirectoryElement:
    __base: var instance = document.createElement('dir');
    __test: return bcd.testObjectName(instance, 'HTMLDirectoryElement');
  HTMLDivElement:
    __base: var instance = document.createElement('div');
    __test: return bcd.testObjectName(instance, 'HTMLDivElement');
  HTMLDListElement:
    __base: var instance = document.createElement('dl');
    __test: return bcd.testObjectName(instance, 'HTMLDListElement');
  HTMLDocument:
    __base: var instance = document;
  HTMLElement:
    __base: var instance = document.createElement('b');
  HTMLEmbedElement:
    __base: var instance = document.createElement('embed');
    __test: return bcd.testObjectName(instance, 'HTMLEmbedElement');
  HTMLFieldSetElement:
    __base: var instance = document.createElement('fieldset');
    __test: return bcd.testObjectName(instance, 'HTMLFieldSetElement');
  HTMLFontElement:
    __base: var instance = document.createElement('font');
    __test: return bcd.testObjectName(instance, 'HTMLFontElement');
  HTMLFormElement:
    __base: var instance = document.createElement('form');
    __test: return bcd.testObjectName(instance, 'HTMLFormElement');
  HTMLFrameElement:
    __base: var instance = document.createElement('frame');
    __test: return bcd.testObjectName(instance, 'HTMLFrameElement');
  HTMLFrameSetElement:
    __base: var instance = document.createElement('frameset');
    __test: return bcd.testObjectName(instance, 'HTMLFrameSetElement');
  HTMLHeadElement:
    __base: var instance = document.createElement('head');
    __test: return bcd.testObjectName(instance, 'HTMLHeadElement');
  HTMLHeadingElement:
    __base: var instance = document.createElement('h1');
    __test: return bcd.testObjectName(instance, 'HTMLHeadingElement');
  HTMLHRElement:
    __base: var instance = document.createElement('hr');
    __test: return bcd.testObjectName(instance, 'HTMLHRElement');
  HTMLHtmlElement:
    __base: var instance = document.createElement('html');
    __test: return bcd.testObjectName(instance, 'HTMLHtmlElement');
  HTMLIFrameElement:
    __base: var instance = document.createElement('iframe');
    __test: return bcd.testObjectName(instance, 'HTMLIFrameElement');
  HTMLImageElement:
    __base: var instance = document.createElement('img');
    __test: return bcd.testObjectName(instance, 'HTMLImageElement');
  HTMLInputElement:
    __base: var instance = document.createElement('input');
    __test: return bcd.testObjectName(instance, 'HTMLInputElement');
  HTMLIsIndexElement:
    __base: var instance = document.createElement('isindex');
    __test: return bcd.testObjectName(instance, 'HTMLIsIndexElement');
  HTMLKeygenElement:
    __base: var instance = document.createElement('keygen');
    __test: return bcd.testObjectName(instance, 'HTMLKeygenElement');
  HTMLLabelElement:
    __base: var instance = document.createElement('label');
    __test: return bcd.testObjectName(instance, 'HTMLLabelElement');
  HTMLLegendElement:
    __base: var instance = document.createElement('legend');
    __test: return bcd.testObjectName(instance, 'HTMLLegendElement');
  HTMLLIElement:
    __base: var instance = document.createElement('li');
    __test: return bcd.testObjectName(instance, 'HTMLLIElement');
  HTMLLinkElement:
    __base: var instance = document.createElement('link');
    __test: return bcd.testObjectName(instance, 'HTMLLinkElement');
  HTMLMapElement:
    __base: var instance = document.createElement('map');
    __test: return bcd.testObjectName(instance, 'HTMLMapElement');
  HTMLMarqueeElement:
    __base: var instance = document.createElement('marquee');
    __test: return bcd.testObjectName(instance, 'HTMLMarqueeElement');
  HTMLMediaElement:
    __base: <%api.HTMLVideoElement:instance%>
    __test: return bcd.testObjectName(instance, 'HTMLVideoElement');
  HTMLMenuElement:
    __base: var instance = document.createElement('menu');
    __test: return bcd.testObjectName(instance, 'HTMLMenuElement');
  HTMLMenuItemElement:
    __base: var instance = document.createElement('menuitem');
    __test: return bcd.testObjectName(instance, 'HTMLMenuItemElement');
  HTMLMetaElement:
    __base: var instance = document.createElement('meta');
    __test: return bcd.testObjectName(instance, 'HTMLMetaElement');
  HTMLMeterElement:
    __base: var instance = document.createElement('meter');
    __test: return bcd.testObjectName(instance, 'HTMLMeterElement');
  HTMLModElement:
    __base: var instance = document.createElement('del');
    __test: return bcd.testObjectName(instance, ['HTMLModElement', 'HTMLDelElement']);
  HTMLObjectElement:
    __base: var instance = document.createElement('object');
    __test: return bcd.testObjectName(instance, 'HTMLObjectElement');
  HTMLOListElement:
    __base: var instance = document.createElement('ol');
    __test: return bcd.testObjectName(instance, 'HTMLOListElement');
  HTMLOptGroupElement:
    __base: var instance = document.createElement('optgroup');
    __test: return bcd.testObjectName(instance, 'HTMLOptGroupElement');
  HTMLOptionElement:
    __base: var instance = document.createElement('option');
    __test: return bcd.testObjectName(instance, 'HTMLOptionElement');
  HTMLOutputElement:
    __base: var instance = document.createElement('output');
    __test: return bcd.testObjectName(instance, 'HTMLOutputElement');
  HTMLParagraphElement:
    __base: var instance = document.createElement('p');
    __test: return bcd.testObjectName(instance, 'HTMLParagraphElement');
  HTMLParamElement:
    __base: var instance = document.createElement('param');
    __test: return bcd.testObjectName(instance, 'HTMLParamElement');
  HTMLPictureElement:
    __base: var instance = document.createElement('picture');
    __test: return bcd.testObjectName(instance, 'HTMLPictureElement');
  HTMLPortalElement:
    __base: var instance = document.createElement('portal');
    __test: return bcd.testObjectName(instance, 'HTMLPortalElement');
  HTMLPreElement:
    __base: var instance = document.createElement('pre');
    __test: return bcd.testObjectName(instance, 'HTMLPreElement');
  HTMLProgressElement:
    __base: var instance = document.createElement('progress');
    __test: return bcd.testObjectName(instance, 'HTMLProgressElement');
  HTMLQuoteElement:
    __base: var instance = document.createElement('blockquote');
    __test: return bcd.testObjectName(instance, ['HTMLQuoteElement', 'HTMLBlockElement', 'HTMLBlockElementConstructor', 'HTMLBlockquoteElement', 'HTMLBlockquoteElementConstructor']);
  HTMLScriptElement:
    __base: var instance = document.createElement('script');
    __test: return bcd.testObjectName(instance, 'HTMLScriptElement');
  HTMLSelectElement:
    __base: var instance = document.createElement('select');
    __test: return bcd.testObjectName(instance, 'HTMLSelectElement');
  HTMLShadowElement:
    __base: var instance = document.createElement('shadow');
    __test: return bcd.testObjectName(instance, 'HTMLShadowElement');
  HTMLSlotElement:
    __base: var instance = document.createElement('slot');
    __test: return bcd.testObjectName(instance, 'HTMLSlotElement');
  HTMLSourceElement:
    __base: var instance = document.createElement('source');
    __test: return bcd.testObjectName(instance, 'HTMLSourceElement');
  HTMLSpanElement:
    __base: var instance = document.createElement('span');
    __test: return bcd.testObjectName(instance, 'HTMLSpanElement');
  HTMLStyleElement:
    __base: var instance = document.createElement('style');
    __test: return bcd.testObjectName(instance, 'HTMLStyleElement');
  HTMLTableCaptionElement:
    __base: var instance = document.createElement('caption');
    __test: return bcd.testObjectName(instance, 'HTMLTableCaptionElement');
  HTMLTableCellElement:
    __base: var instance = document.createElement('td');
    __test: return bcd.testObjectName(instance, ['HTMLTableCellElement', 'HTMLTableDataCellElement']);
  HTMLTableColElement:
    __base: var instance = document.createElement('col');
    __test: return bcd.testObjectName(instance, 'HTMLTableColElement');
  HTMLTableElement:
    __base: var instance = document.createElement('table');
    __test: return bcd.testObjectName(instance, 'HTMLTableElement');
  HTMLTableRowElement:
    __base: var instance = document.createElement('tr');
    __test: return bcd.testObjectName(instance, 'HTMLTableRowElement');
  HTMLTableSectionElement:
    __base: var instance = document.createElement('tbody');
    __test: return bcd.testObjectName(instance, 'HTMLTableSectionElement');
  HTMLTemplateElement:
    __base: var instance = document.createElement('template');
    __test: return bcd.testObjectName(instance, 'HTMLTemplateElement');
  HTMLTextAreaElement:
    __base: var instance = document.createElement('textarea');
    __test: return bcd.testObjectName(instance, 'HTMLTextAreaElement');
  HTMLTimeElement:
    __base: var instance = document.createElement('time');
    __test: return bcd.testObjectName(instance, 'HTMLTimeElement');
  HTMLTitleElement:
    __base: var instance = document.createElement('title');
    __test: return bcd.testObjectName(instance, 'HTMLTitleElement');
  HTMLTrackElement:
    __base: var instance = document.createElement('track');
    __test: return bcd.testObjectName(instance, 'HTMLTrackElement');
  HTMLUListElement:
    __base: var instance = document.createElement('ul');
    __test: return bcd.testObjectName(instance, 'HTMLUListElement');
  HTMLUnknownElement:
    __base: var instance = document.createElement('unknown');
    __test: return bcd.testObjectName(instance, 'HTMLUnknownElement');
  HTMLVideoElement:
    __base: var instance = document.createElement('video');
    __test: return bcd.testObjectName(instance, 'HTMLVideoElement');
  IDBVersionChangeEvent:
    __base: >-
      var instance;
      try {
        instance = new IDBVersionChangeEvent('');
      } catch(e) {
        instance = document.createEvent('IDBVersionChangeEvent');
      }
  IIRFilterNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createIIRFilter([1], [1]);
  ImageBitmap:
    __resources:
      - image-black
    __base: var instance = createImageBitmap(document.getElementById('resource-image-black'));
  ImageCapture:
    __base: >-
      <%api.MediaDevices:mediaDevices%>
      var track = mediaDevices.getUserMedia({video: true});
      track.then(function() {});
      var promise = track.then(function(t) {
        return new ImageCapture(t);
      });
  ImageData:
    __base: >-
      <%api.CanvasRenderingContext2D:ctx%>
      var instance = ctx.createImageData(16, 16);
  InstallEvent:
    __base: var instance = new InstallEvent('');
  KeyboardEvent:
    __base: >-
      var instance;
      try {
        instance = new KeyboardEvent('');
      } catch(e) {
        instance = document.createEvent('KeyboardEvent');
      }
  KHR_parallel_shader_compile:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('KHR_parallel_shader_compile');
  Location:
    __base: var instance = location;
  MediaCapabilities:
    __base: var instance = navigator.mediaCapabilities;
  MediaDeviceInfo:
    __base: >-
      <%api.MediaDevices:mediaDevices%>
      var promise = navigator.mediaDevices.enumerateDevices().then(
        function(devices) {
          return devices[0];
        }
      );
  MediaDevices:
    __base: var instance = navigator.mediaDevices;
  MediaElementAudioSourceNode:
    __resources:
      - audio-blip
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createMediaElementSource(document.getElementById('resource-audio-blip'));
  MediaEncryptedEvent:
    __base: var instance = new MediaEncryptedEvent('');
  MediaKeyMessageEvent:
    __base: "var instance = new MediaKeyMessageEvent('license-request', {message: new ArrayBuffer(), messageType: 'license-request'});"
  MediaList:
    __resources:
      - createStyleSheet
    __base: >-
      var stylesheet = reusableInstances.createStyleSheet('@media (max-width: 600px) {body {background-color: #111;color: white;}}');
      var instance = stylesheet.media;
  MediaQuery:
    __base: "var instance = window.matchMedia('screen and max-width: 800px;');"
  MediaQueryListEvent:
    __base: var instance = new MediaQueryListEvent('');
  MediaSession:
    __base: var instance = navigator.mediaSession;
  MediaSource:
    __base: var instance = new MediaSource();
    isTypeSupported: return 'isTypeSupported' in MediaSource;
  MediaStream:
    __base: >-
      <%api.MediaDevices:mediaDevices%>
      var promise = mediaDevices.getUserMedia({audio: true});
      promise.then(function() {});
  MediaStreamAudioDestinationNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createMediaStreamDestination();
  MediaStreamAudioSourceNode:
    __resources:
      - audioContext
    __base: >-
      <%api.MediaStream:mediaStream%>
      if (!reusableInstances.audioContext) {
        return false;
      }
      var promise = mediaStream.then(function(ms) {
        return reusableInstances.audioContext.createMediaStreamSource(ms)
      });
  MediaStreamTrack:
    __base: >-
      <%api.MediaStream:mediaStream%>
      var promise = mediaStream.then(function(ms) {
        return ms.getAudioTracks()[0]
      });
  MediaStreamTrackAudioSourceNode:
    __resources:
      - audioContext
    __base: >-
      <%api.MediaStream:mediaStream%>
      if (!reusableInstances.audioContext) {
        return false;
      }
      var promise = mediaStream.then(function(ms) {
        return reusableInstances.audioContext.createMediaStreamTrackSource(ms)
      });
  MerchantValidationEvent:
    __base: var instance = new MerchantValidationEvent('');
  MessageEvent:
    __base: >-
      var instance;
      try {
        instance = new MessageEvent('');
      } catch(e) {
        instance = document.createEvent('MessageEvent');
      }
  MessageChannel:
    __base: >-
      if (!('MessageChannel' in self)) {
        return false;
      }
      var instance = new MessageChannel();
  MessagePort:
    __base: >-
      <%api.MessageChannel:channel%>
      var instance = channel.port1;
  MimeType:
    __base: var instance = navigator.mimeTypes[0];
  MimeTypeArray:
    __base: var instance = navigator.mimeTypes;
  MouseEvent:
    __base: >-
      var instance;
      try {
        instance = new MouseEvent('click');
      } catch(e) {
        instance = document.createEvent('MouseEvent');
      }
  MutationEvent:
    __base: var instance = document.createEvent('MutationEvent');
  NamedNodeMap:
    __base: var instance = document.body.attributes;
  Navigator:
    __base: var instance = navigator;
  Node:
    __base: var instance = document;
  NodeList:
    __base: var instance = document.childNodes;
  NodeIterator:
    __base: var instance = document.createNodeIterator(document);
  Notification:
    __base: >-
      if (!('Notification' in self)) {
        return false;
      }
      var instance = new Notification('');
  NotificationEvent:
    __base: var instance = new NotificationEvent('');
  OfflineAudioCompletionEvent:
    __resources:
      - audioContext
    __base: >-
      <%api.AudioBuffer:buffer%>
      var instance = new OfflineAudioCompletionEvent('', {renderedBuffer: buffer});
  OfflineAudioContext:
    __resources:
      - offlineAudioContext
    __base: var instance = reusableInstances.offlineAudioContext;
    __test: return 'OfflineAudioContext' in self;
  OscillatorNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createOscillator();
  OES_draw_buffers_indexed:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('OES_draw_buffers_indexed');
  OES_element_index_uint:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('OES_element_index_uint');
  OES_fbo_render_mipmap:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('OES_fbo_render_mipmap');
  OES_standard_derivatives:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('OES_standard_derivatives');
  OES_texture_float:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('OES_texture_float');
  OES_texture_float_linear:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('OES_texture_float_linear');
  OES_texture_half_float:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('OES_texture_half_float');
  OES_texture_half_float_linear:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('OES_texture_half_float_linear');
  OES_vertex_array_object:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('OES_vertex_array_object');
  OVR_multiview2:
    __resources:
      - webGL2
    __base: >-
      if (!reusableInstances.webGL2) {
        return false;
      };
      var instance = reusableInstances.webGL2.getExtension('OVR_multiview2');
  PageTransitionEvent:
    __base: >-
      var instance;
      try {
        instance = new PageTransitionEvent('');
      } catch(e) {
        instance = document.createEvent('PageTransitionEvent');
      }
  PannerNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createPanner();
  Performance:
    __base: >-
      if (!('performance' in self)) {
        return false;
      };
      var instance = performance;
  PerformanceEntry:
    __base: <%api.PerformanceMark:instance%>
  PerformanceMark:
    __base: >-
      if (!('performance' in self)) {
        return false;
      };
      if (!performance.mark) {
        return false;
      };
      performance.mark('mark');
      var instance = performance.getEntriesByName('mark')[0];
  PerformanceNavigation:
    __base: >-
      if (!('performance' in self)) {
        return false;
      };
      var instance = performance.navigation;
  PerformanceTiming:
    __base: >-
      if (!('performance' in self)) {
        return false;
      };
      var instance = performance.timing;
  PeriodicWave:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var real = new Float32Array(2);
      var imag = new Float32Array(2);
      var instance = reusableInstances.audioContext.createPeriodicWave(real, imag);
  Plugin: # XXX Doesn't work if there are no plugins
    __base: >-
      <%api.PluginArray:plugins%>
      var instance = plugins[0];
  PluginArray:
    __base: var instance = navigator.plugins;
  PopStateEvent:
    __base: >-
      var instance;
      try {
        instance = new PopStateEvent('');
      } catch(e) {
        instance = document.createEvent('PopStateEvent');
      }
  ProcessingInstruction:
    __base: >-
      var doc = new DOMParser().parseFromString('<foo />', 'application/xml');
      var instance = doc.createProcessingInstruction('xml-stylesheet', 'href="mycss.css" type="text/css"');
  PushEvent:
    __base: var instance = new PushEvent('');
  Range:
    __base: var instance = document.createRange();
  Request:
    __base: var instance = new Request('');
  Response:
    __base: var instance = new Response('');
  RTCDataChannel:
    __base: >-
      <%api.RTCPeerConnection:connection%>
      var instance = connection.createDataChannel('channel');
  RTCDataChannelEvent:
    __base: >-
      <%api.RTCDataChannel:channel%>
      var instance = new RTCDataChannelEvent('', {channel: channel});
  RTCDTMFToneChangeEvent:
    __base: "new RTCDTMFToneChangeEvent('', {tone: ''});"
  RTCPeerConnection:
    __base: >-
      var constructor = (window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection);
      if (!constructor) {
        return false;
      }
      var instance = new constructor();
  Screen:
    __base: var instance = window.screen;
  ScriptProcessorNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createScriptProcessor();
  SecurityPolicyViolationEvent:
    __base: var instance = new SecurityPolicyViolationEvent('');
  Selection:
    __base: var instance = window.getSelection();
  ShadowRoot:
    __base: >-
      var el = document.createElement('div');
      if (!el.attachShadow) {
        return false;
      };
      el.attachShadow({mode: 'open'});
      var instance = el.shadowRoot;
  SpeechRecognition:
    __resources:
      - speechRecognition
    __base: var instance = reusableInstances.speechRecognition;
    __test: return 'SpeechRecognition' in self
  SpeechRecognitionErrorEvent:
    __base: >-
      var instance;
      try {
        instance = new SpeechRecognitionErrorEvent('');
      } catch(e) {
        instance = document.createEvent('SpeechRecognitionErrorEvent');
      }
  SpeechRecognitionEvent:
    __base: >-
      var instance;
      try {
        instance = new SpeechRecognitionEvent('');
      } catch(e) {
        instance = document.createEvent('SpeechRecognitionEvent');
      }
  SpeechSynthesisErrorEvent:
    __base: >-
      var instance;
      try {
        instance = new SpeechSynthesisErrorEvent('');
      } catch(e) {
        instance = document.createEvent('SpeechSynthesisErrorEvent');
      }
  SpeechSynthesisEvent:
    __base: >-
      var instance;
      try {
        instance = new SpeechSynthesisEvent('');
      } catch(e) {
        instance = document.createEvent('SpeechSynthesisEvent');
      }
  StereoPannerNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createStereoPanner();
  StorageEvent:
    __base: >-
      var instance;
      try {
        instance = new StorageEvent('');
      } catch(e) {
        instance = document.createEvent('StorageEvent');
      }
  StyleMedia:
    __base: var instance = window.styleMedia;
  StyleSheet:
    __resources:
      - createStyleSheet
    __base: <%api.CSSStyleSheet:instance%>
  StyleSheetList:
    __base: var instance = document.styleSheets;
  SubtleCrypto:
    __base: >-
      if (!('crypto' in self)) {
        return false;
      };
      var instance = crypto.subtle || crypto.webkitSubtle;
  SVGAElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'a');
    __test: return bcd.testObjectName(instance, 'SVGAElement');
  SVGAngle:
    __base: >-
      <%api.SVGSVGElement:el%>
      var instance = el.createSVGAngle();
  SVGAnimatedAngle:
    __base: >-
      <%api.SVGMarkerElement:el%>
      var instance = el.orientAngle;
  SVGAnimatedBoolean:
    __base: >-
      <%api.SVGFEConvolveMatrixElement:el%>
      var instance = el.preserveAlpha;
  SVGAnimatedEnumeration:
    __base: >-
      <%api.SVGMarkerElement:el%>
      var instance = el.orientType;
  SVGAnimatedInteger:
    __base: >-
      <%api.SVGFEConvolveMatrixElement:el%>
      var instance = el.orderX;
  SVGAnimatedLength:
    __base: >-
      <%api.SVGMarkerElement:el%>
      var instance = el.refX;
  SVGAnimatedLengthList:
    __base: >-
      <%api.SVGTextPositioningElement:el%>
      var instance = el.x;
  SVGAnimatedNumber:
    __base: >-
      <%api.SVGGeometryElement:el%>
      var instance = el.pathLength;
  SVGAnimatedNumberList:
    __base: >-
      <%api.SVGFEConvolveMatrixElement:el%>
      var instance = el.kernelMatrix;
  SVGAnimatedPreserveAspectRatio:
    __base: >-
      <%api.SVGFEImageElement:el%>
      var instance = el.preserveAspectRatio;
  SVGAnimatedRect:
    __base: >-
      <%api.SVGViewElement:el%>
      var instance = el.viewBox;
  SVGAnimatedTransformList:
    __base: >-
      <%api.SVGGraphicsElement:el%>
      var instance = el.transform;
  SVGAltGlyphDefElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'altGlyphDef');
    __test: return bcd.testObjectName(instance, 'SVGAltGlyphDefElement');
  SVGAltGlyphElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'altGlyph');
    __test: return bcd.testObjectName(instance, 'SVGAltGlyphElement');
  SVGAltGlyphItemElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'altGlyphItem');
    __test: return bcd.testObjectName(instance, 'SVGAltGlyphItemElement');
  SVGAnimateColorElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'animateColor');
    __test: return bcd.testObjectName(instance, 'SVGAnimateColorElement');
  SVGAnimateElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'animate');
    __test: return bcd.testObjectName(instance, 'SVGAnimateElement');
  SVGAnimateMotionElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'animateMotion');
    __test: return bcd.testObjectName(instance, 'SVGAnimateMotionElement');
  SVGAnimateTransformElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'animateTransform');
    __test: return bcd.testObjectName(instance, 'SVGAnimateTransformElement');
  SVGAnimationElement:
    __base: <%api.SVGAnimateElement:instance%>
    __test: return bcd.testObjectName(instance, 'SVGAnimateElement');
  SVGCircleElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
    __test: return bcd.testObjectName(instance, 'SVGCircleElement');
  SVGClipPathElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');
    __test: return bcd.testObjectName(instance, 'SVGClipPathElement');
  SVGColorProfileElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'color-profile');
    __test: return bcd.testObjectName(instance, 'SVGColorProfileElement');
  SVGComponentTransferFunctionElement:
    __base: <%api.SVGFEFuncAElement:instance%>
    __test: return bcd.testObjectName(instance, 'SVGFEFuncAElement');
  SVGCursorElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'cursor');
    __test: return bcd.testObjectName(instance, 'SVGCursorElement');
  SVGDefsElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
    __test: return bcd.testObjectName(instance, 'SVGDefsElement');
  SVGDescElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'desc');
    __test: return bcd.testObjectName(instance, 'SVGDescElement');
  SVGDiscardElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'discard');
    __test: return bcd.testObjectName(instance, 'SVGDiscardElement');
  SVGElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'title');
  SVGEllipseElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'ellipse');
    __test: return bcd.testObjectName(instance, 'SVGEllipseElement');
  SVGFEBlendElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feBlend');
    __test: return bcd.testObjectName(instance, 'SVGFEBlendElement');
  SVGFEColorMatrixElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feColorMatrix');
    __test: return bcd.testObjectName(instance, 'SVGFEColorMatrixElement');
  SVGFEComponentTransferElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feComponentTransfer');
    __test: return bcd.testObjectName(instance, 'SVGFEComponentTransferElement');
  SVGFECompositeElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feComposite');
    __test: return bcd.testObjectName(instance, 'SVGFECompositeElement');
  SVGFEConvolveMatrixElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feConvolveMatrix');
    __test: return bcd.testObjectName(instance, 'SVGFEConvolveMatrixElement');
  SVGFEDiffuseLightingElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feDiffuseLighting');
    __test: return bcd.testObjectName(instance, 'SVGFEDiffuseLightingElement');
  SVGFEDisplacementMapElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feDisplacementMap');
    __test: return bcd.testObjectName(instance, 'SVGFEDisplacementMapElement');
  SVGFEDistantLightElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feDistantLight');
    __test: return bcd.testObjectName(instance, 'SVGFEDistantLightElement');
  SVGFEDropShadowElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feDropShadow');
    __test: return bcd.testObjectName(instance, 'SVGFEDropShadowElement');
  SVGFEFloodElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feFlood');
    __test: return bcd.testObjectName(instance, 'SVGFEFloodElement');
  SVGFEFuncAElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feFuncA');
    __test: return bcd.testObjectName(instance, 'SVGFEFuncAElement');
  SVGFEFuncBElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feFuncB');
    __test: return bcd.testObjectName(instance, 'SVGFEFuncBElement');
  SVGFEFuncGElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feFuncG');
    __test: return bcd.testObjectName(instance, 'SVGFEFuncGElement');
  SVGFEFuncRElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feFuncR');
    __test: return bcd.testObjectName(instance, 'SVGFEFuncRElement');
  SVGFEGaussianBlurElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feGaussianBlur');
    __test: return bcd.testObjectName(instance, 'SVGFEGaussianBlurElement');
  SVGFEImageElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feImage');
    __test: return bcd.testObjectName(instance, 'SVGFEImageElement');
  SVGFEMergeElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feMerge');
    __test: return bcd.testObjectName(instance, 'SVGFEMergeElement');
  SVGFEMergeNodeElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feMergeNode');
    __test: return bcd.testObjectName(instance, 'SVGFEMergeNodeElement');
  SVGFEMorphologyElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feMorphology');
    __test: return bcd.testObjectName(instance, 'SVGFEMorphologyElement');
  SVGFEOffsetElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feOffset');
    __test: return bcd.testObjectName(instance, 'SVGFEOffsetElement');
  SVGFEPointLightElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'fePointLight');
    __test: return bcd.testObjectName(instance, 'SVGFEPointLightElement');
  SVGFESpecularLightingElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feSpecularLighting');
    __test: return bcd.testObjectName(instance, 'SVGFESpecularLightingElement');
  SVGFESpotLightElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feSpotLight');
    __test: return bcd.testObjectName(instance, 'SVGFESpotLightElement');
  SVGFETileElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feTile');
    __test: return bcd.testObjectName(instance, 'SVGFETileElement');
  SVGFETurbulenceElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'feTurbulence');
    __test: return bcd.testObjectName(instance, 'SVGFETurbulenceElement');
  SVGFilterElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'filter');
    __test: return bcd.testObjectName(instance, 'SVGFilterElement');
  SVGFontElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'font');
    __test: return bcd.testObjectName(instance, 'SVGFontElement');
  SVGFontFaceElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'font-face');
    __test: return bcd.testObjectName(instance, 'SVGFontFaceElement');
  SVGFontFaceFormatElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'font-face-format');
    __test: return bcd.testObjectName(instance, 'SVGFontFaceFormatElement');
  SVGFontFaceNameElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'font-face-name');
    __test: return bcd.testObjectName(instance, 'SVGFontFaceNameElement');
  SVGFontFaceSrcElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'font-face-src');
    __test: return bcd.testObjectName(instance, 'SVGFontFaceSrcElement');
  SVGFontFaceUriElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'font-face-uri');
    __test: return bcd.testObjectName(instance, 'SVGFontFaceUriElement');
  SVGForeignObjectElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
    __test: return bcd.testObjectName(instance, 'SVGForeignObjectElement');
  SVGGElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    __test: return bcd.testObjectName(instance, 'SVGGElement');
  SVGGeometryElement:
    __base: <%api.SVGPathElement:instance%>
    __test: return bcd.testObjectName(instance, 'SVGPathElement');
  SVGGlyphElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'glyph');
    __test: return bcd.testObjectName(instance, 'SVGGlyphElement');
  SVGGlyphRefElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'glyphRef');
    __test: return bcd.testObjectName(instance, 'SVGGlyphRefElement');
  SVGGradientElement:
    __base: <%api.SVGLinearGradientElement:instance%>
    __test: return bcd.testObjectName(instance, 'SVGLinearGradientElement');
  SVGGraphicsElement:
    __base: <%api.SVGImageElement:instance%>
    __test: return bcd.testObjectName(instance, 'SVGImageElement');
  SVGHKernElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'hkern');
    __test: return bcd.testObjectName(instance, 'SVGHKernElement');
  SVGImageElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'image');
    __test: return bcd.testObjectName(instance, 'SVGImageElement');
  SVGLength:
    __base: >-
      <%api.SVGSVGElement:el%>
      var instance = el.createSVGLength();
  SVGLengthList:
    __base: >-
      <%api.SVGAnimatedLengthList:list%>
      var instance = list.baseVal;
  SVGLinearGradientElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');
    __test: return bcd.testObjectName(instance, 'SVGLinearGradientElement');
  SVGLineElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    __test: return bcd.testObjectName(instance, 'SVGLineElement');
  SVGMarkerElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'marker');
    __test: return bcd.testObjectName(instance, 'SVGMarkerElement');
  SVGMaskElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'mask');
    __test: return bcd.testObjectName(instance, 'SVGMaskElement');
  SVGMeshElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'mesh');
    __test: return bcd.testObjectName(instance, 'SVGMeshElement');
  SVGMetadataElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'metadata');
    __test: return bcd.testObjectName(instance, 'SVGMetadataElement');
  SVGMissingGlyphElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'missing-glyph');
    __test: return bcd.testObjectName(instance, 'SVGMissingGlyphElement');
  SVGMPathElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'mpath');
    __test: return bcd.testObjectName(instance, 'SVGMPathElement');
  SVGNumber:
    __base: >-
      <%api.SVGSVGElement:el%>
      var instance = el.createSVGNumber();
  SVGNumberList:
    __base: >-
      <%api.SVGAnimatedNumberList:list%>
      var instance = list.baseVal;
  SVGPathElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    __test: return bcd.testObjectName(instance, 'SVGPathElement');
  SVGPatternElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');
    __test: return bcd.testObjectName(instance, 'SVGPatternElement');
  SVGPoint:
    __base: >-
      <%api.SVGSVGElement:el%>
      var instance = el.createSVGPoint();
  SVGPointList:
    __base: >-
      <%api.SVGPolygonElement:el%>
      var instance = el.points;
  SVGPolygonElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
    __test: return bcd.testObjectName(instance, 'SVGPolygonElement');
  SVGPolylineElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
    __test: return bcd.testObjectName(instance, 'SVGPolylineElement');
  SVGPreserveAspectRatio:
    __base: >-
      <%api.SVGSVGElement:el%>
      var instance = el.preserveAspectRatio.baseVal;
  SVGRadialGradientElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'radialGradient');
    __test: return bcd.testObjectName(instance, 'SVGRadialGradientElement');
  SVGRect:
    __base: >-
      <%api.SVGSVGElement:el%>
      var instance = el.createSVGRect();
  SVGRectElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
    __test: return bcd.testObjectName(instance, 'SVGRectElement');
  SVGScriptElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'script');
    __test: return bcd.testObjectName(instance, 'SVGScriptElement');
  SVGSetElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'set');
    __test: return bcd.testObjectName(instance, 'SVGSetElement');
  SVGSolidcolorElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'solidcolor');
    __test: return bcd.testObjectName(instance, 'SVGSolidcolorElement');
  SVGStopElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
    __test: return bcd.testObjectName(instance, 'SVGStopElement');
  SVGStringList:
    __base: >-
      <%api.SVGGraphicsElement:el%>
      var instance = el.systemLanguage;
  SVGStyleElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'style');
    __test: return bcd.testObjectName(instance, 'SVGStyleElement');
  SVGSVGElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    __test: return bcd.testObjectName(instance, 'SVGSVGElement');
  SVGSwitchElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'switch');
    __test: return bcd.testObjectName(instance, 'SVGSwitchElement');
  SVGSymbolElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'symbol');
    __test: return bcd.testObjectName(instance, 'SVGSymbolElement');
  SVGTextElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'text');
    __test: return bcd.testObjectName(instance, 'SVGTextElement');
  SVGTextContentElement:
    __base: <%api.SVGTextElement:instance%>
    __test: return bcd.testObjectName(instance, 'SVGTextElement');
  SVGTextPathElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'textPath');
    __test: return bcd.testObjectName(instance, 'SVGTextPathElement');
  SVGTextPositioningElement:
    __base: <%api.SVGTextElement:instance%>
    __test: return bcd.testObjectName(instance, 'SVGTextElement');
  SVGTitleElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'title');
    __test: return bcd.testObjectName(instance, 'SVGTitleElement');
  SVGTransform:
    __base: >-
      <%api.SVGSVGElement:el%>
      var instance = el.createSVGTransform();
  SVGTransformList:
    __base: >-
      <%api.SVGAnimatedTransformList:list%>
      var instance = list.baseVal;
  SVGTRefElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'tref');
    __test: return bcd.testObjectName(instance, 'SVGTRefElement');
  SVGTSpanElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
    __test: return bcd.testObjectName(instance, 'SVGTSpanElement');
  SVGUnknownElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'unknown');
    __test: return bcd.testObjectName(instance, 'SVGUnknownElement');
  SVGUseElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'use');
    __test: return bcd.testObjectName(instance, 'SVGUseElement');
  SVGViewElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'view');
    __test: return bcd.testObjectName(instance, 'SVGViewElement');
  SVGVKernElement:
    __base: var instance = document.createElementNS('http://www.w3.org/2000/svg', 'vkern');
    __test: return bcd.testObjectName(instance, 'SVGVKernElement');
  Text:
    __base: >-
      var el = document.createElement('b');
      el.innerHTML = 'text';
      var instance
      = el.childNodes[0];
  TextDecoder:
    __base: var instance = new TextDecoder();
  TextEncoder:
    __base: var instance = new TextEncoder();
  TextTrack:
    __resources:
      - video-blank
    __base: >-
      <%api.TextTrackList:texttracks%>
      var instance = texttracks[0];
  TextTrackCue:
    __resources:
      - video-blank
    __base: >-
      <%api.TextTrackCueList:cues%>
      var instance = cues[0];
  TextTrackCueList:
    __resources:
      - video-blank
    __base: >-
      <%api.TextTrack:texttrack%>
      var instance = texttrack.cues;
  TextTrackList:
    __resources:
      - video-blank
    __base: >-
      var el = document.getElementById('resource-video-blank');
      var instance = el.textTracks;
  TimeRanges:
    __resources:
      - video-blank
    __base: >-
      var el = document.getElementById('resource-video-blank');
      var instance = el.buffered;
  TouchEvent:
    __base: var instance = new TouchEvent('');
  TrackEvent:
    __base: >-
      var instance;
      try {
        instance = new TrackEvent('');
      } catch(e) {
        instance = document.createEvent('TrackEvent');
      }
  TransitionEvent:
    __base: >-
      var instance;
        try {instance = new TransitionEvent('transitionend');
      } catch(e) {
        instance = document.createEvent('TransitionEvent');
      }
  TreeWalker:
    __base: var instance = document.createTreeWalker(document);
  UIEvent:
    __base: >-
      var instance;
      try {
        instance = new UIEvent('');
      } catch(e) {
        instance = document.createEvent('UIEvent');
      }
  URL:
    __base: >-
      var instance;
      try {
        instance = new URL(location.href)
      } catch(e) {
        instance = new webkitURL(location.href)
      };
    __test: return 'URL' in self;
  ValidityState:
    __base: >-
      <%api.HTMLInputElement:el%>
      var instance = el.validity;
  VideoTrack:
    __resources:
      - video-blank
    __base: >-
      <%api.VideoTrackList:videoTracks%>
      var instance = videoTracks[0];
  VideoTrackList:
    __resources:
      - video-blank
    __base: >-
      var el = document.getElementById('resource-video-blank');
      var instance = el.videoTracks;
  VTTCue:
    __resources:
      - video-blank
    __base: <%api.TextTrackCue:instance%>
  WaveShaperNode:
    __resources:
      - audioContext
    __base: >-
      if (!reusableInstances.audioContext) {
        return false;
      }
      var instance = reusableInstances.audioContext.createWaveShaper();
  WebGLContextEvent:
    __base: >-
      var instance;
      try {
        instance = new WebGLContextEvent('');
      } catch(e) {
        instance = document.createEvent('WebGLContextEvent');
      }
  WebGLRenderingContext:
    __resources:
      - webGL1
    __base: var instance = reusableInstances.webGL1;
  WebGL2RenderingContext:
    __resources:
      - webGL2
    __base: var instance = reusableInstances.webGL2;
  WEBGL_blend_equation_advanced_coherent:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_blend_equation_advanced_coherent');
  WEBGL_color_buffer_float:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('WEBGL_color_buffer_float');
  WEBGL_compressed_texture_astc:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_compressed_texture_astc');
  WEBGL_compressed_texture_atc:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_compressed_texture_atc');
  WEBGL_compressed_texture_etc:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_compressed_texture_etc');
  WEBGL_compressed_texture_etc1:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_compressed_texture_etc1');
  WEBGL_compressed_texture_pvrtc:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_compressed_texture_pvrtc');
  WEBGL_compressed_texture_s3tc:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_compressed_texture_s3tc');
  WEBGL_compressed_texture_s3tc_srgb:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_compressed_texture_s3tc_srgb');
  WEBGL_debug_renderer_info:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_debug_renderer_info');
  WEBGL_debug_shaders:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_debug_shaders');
  WEBGL_depth_texture:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('WEBGL_depth_texture');
  WEBGL_draw_buffers:
    __resources:
      - webGL1
    __base: >-
      if (!reusableInstances.webGL1) {
        return false;
      };
      var instance = reusableInstances.webGL1.getExtension('WEBGL_draw_buffers');
  WEBGL_draw_instanced_base_vertex_base_instance:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_draw_instanced_base_vertex_base_instance');
  WEBGL_multi_draw:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_multi_draw');
  WEBGL_multi_draw_instanced_base_vertex_base_instance:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_multi_draw_instanced_base_vertex_base_instance');
  WEBGL_lose_context:
    __resources:
      - webGL
    __base: >-
      if (!reusableInstances.webGL) {
        return false;
      };
      var instance = reusableInstances.webGL.getExtension('WEBGL_lose_context');
  WebGLTimerQueryEXT:
    __resources:
      - webGL
    __base: >-
      <%api.EXT_disjoint_timer_query:ext%>
      var instance = ext.createQueryEXT();
  WebGLVertexArrayObjectOES:
    __resources:
      - webGL1
    __base: >-
      <%api.OES_vertex_array_object:ext%>
      var instance = ext.createVertexArrayOES();
  WebKitAnimationEvent:
    __base: >-
      var instance;
      try {
        instance = new WebKitAnimationEvent('webkitAnimationEnd');
      } catch(e) {
        instance = document.createEvent('WebKitAnimationEvent');
      }
  WebKitTransitionEvent:
    __base: >-
      var instance;
      try {
        instance = new WebKitTransitionEvent('webkitTransitionEnd');
      } catch(e) {
        instance = document.createEvent('WebKitTransitionEvent');
      }
  WebSocket:
    __base: >-
      var constructor = self.WebSocket || self.MozWebSocket;
      if (!constructor) {
        return false;
      }
      var instance = new constructor('wss://' + location.hostname);
  WheelEvent:
    __base: >-
      var instance;
      try {
        instance = new WheelEvent('wheel');
      } catch(e) {
        instance = document.createEvent('WheelEvent');
      }
  Window:
    __base: var instance = window;
  WindowOrWorkerGlobalScope:
    __base: var instance = self;
  WorkerGlobalScope:
    __base: var instance = self;
  WorkerLocation:
    __base: var instance = location;
  WorkerNavigator:
    __base: var instance = navigator;
  WritableStreamDefaultController:
    __base: >-
      if (!('WritableStream' in self)) {
        return false;
      };
      var promise = new Promise(function(resolve, reject) {
        new WritableStream({
          start(controller) {
            resolve(controller)
          }
        })
      });
  WritableStreamDefaultWriter:
    __base: >-
      if (!('WritableStream' in self)) {
        return false;
      };
      var instance = new WritableStream({}).getWriter();
  XMLHttpRequest:
    __base: var instance = new XMLHttpRequest();
  XPathExpression:
    __base: >-
      var xpe = new XPathEvaluator();
      var instance = xpe.createExpression('//div', xpe.createNSResolver(document));
  XPathResult:
    __base: >-
      <%api.XPathExpression:exp%>
      var instance = exp.evaluate(document);

css:
  properties:
    custom-property: >-
      return CSS.supports('color', 'var(--foo)') || CSS.supports('color',
      'env(--foo)');
