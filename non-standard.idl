// Manually maintained definitions for features not in any specification, like
// non-standard features and features that have been removed or renamed.

// https://chromium.googlesource.com/chromium/src/+/4260025dd80eed380e0c1fff0e4be2bdd0ae0e8a
// https://chromium.googlesource.com/chromium/src/+/f5e8986bdcd359c7ca82d83907c81642dd01f55e
partial interface AudioParam {
  AudioParam cancelValuesAndHoldAtTime(double startTime);
};

dictionary ElementRegistrationOptions {
  object? prototype = null;
  DOMString? extends = null;
};

partial interface Document {
  Range caretRangeFromPoint(optional long x = 0, optional long y = 0);

  Promise<boolean> hasTrustToken(USVString issuer);

  readonly attribute FeaturePolicy featurePolicy;

  any registerElement(DOMString type, optional ElementRegistrationOptions options = {});

  readonly attribute DOMString webkitVisibilityState;
  readonly attribute boolean webkitHidden;

  attribute EventHandler onbeforecopy;
  attribute EventHandler onbeforecut;
  attribute EventHandler onbeforepaste;
  attribute EventHandler onsearch;

  boolean contains();
  Touch createTouch();
  TouchList createTouchList();
  readonly attribute nsIURI documentURIObject;
  void enableStyleSheetsForSet(DOMString? name);
  boolean execCommandShowHelp(DOMString name);
  readonly attribute long fileSize;
  nsIBoxObject getBoxObjectFor(DOMElement element);
  readonly attribute long height;
  readonly attribute DOMString? lastStyleSheetSet;
  void loadOverlay(DOMString url, nsIObserver observer);
  void mozSetImageElement(DOMString imageElementId, DOMElement imageElement);
  readonly attribute boolean mozSyntheticDocument;
  void normalizeDocument();
  attribute EventHandler onafterscriptexecute;
  attribute EventHandler onbeforescriptexecute;
  readonly attribute DOMString? origin;
  readonly attribute Node? popupNode;
  readonly attribute DOMString? preferredStyleSheetSet;
  void queryCommandText();
  void releaseCapture();
  void routeEvent();
  readonly attribute DOMString? selectedStyleSheetSet;
  readonly attribute FrozenArray<DOMElement> styleSheetSets;
  readonly attribute XULTooltip tooltipNode;
  attribute UndoManager undoManager;
  readonly attribute long width;
};

partial interface Element {
  void scrollIntoViewIfNeeded(optional boolean centerIfNeeded);
  ShadowRoot createShadowRoot();
  NodeList getDestinationInsertionPoints();
  readonly attribute DOMString? computedRole;
  readonly attribute DOMString? computedName;
  readonly attribute AccessibleNode? accessibleNode;

  attribute EventHandler onbeforecopy;
  attribute EventHandler onbeforecut;
  attribute EventHandler onbeforepaste;
  attribute EventHandler onsearch;
  attribute EventHandler onbeforematch;

  readonly attribute DOMString? accessKey;
  readonly attribute DOMString? attributeStyleMap;
  readonly attribute DOMString? currentStyle;
  readonly attribute DOMString? name;
  readonly attribute boolean openOrClosedShadowRoot;
  readonly attribute DOMString? runtimeStyle;
  readonly attribute Number? scrollLeftMax;
  void setCapture(optional boolean retargetToElement);
  readonly attribute boolean tabStop;
};

partial interface Event {
  readonly attribute object path;
  readonly attribute Element? explicitOriginalTarget;
  boolean getPreventDefault();
  readonly attribute Element? originalTarget;
  attribute boolean preventBubble;
  attribute boolean preventCapture;
};

partial interface File {
  readonly attribute object lastModifiedDate;
};

[Exposed=Window]
interface GamepadAxisEvent : GamepadEvent {
  constructor(DOMString type, optional GamepadAxisEventInit eventInitDict = {});
  readonly attribute unsigned long axis;
  readonly attribute double value;
};

[Exposed=Window]
interface GamepadButtonEvent : GamepadEvent {
    constructor(DOMString type, optional GamepadButtonEventInit eventInitDict = {});
    readonly attribute unsigned long button;
    readonly attribute double value;
};

partial interface HTMLFrameSetElement {
  attribute EventHandler onorientationchange;
};

partial interface HTMLInputElement {
  attribute boolean incremental;
};

partial interface HTMLMediaElement {
  readonly attribute unsigned long long webkitAudioDecodedByteCount;
  readonly attribute unsigned long long webkitVideoDecodedByteCount;
};

partial interface HTMLVideoElement {
  readonly attribute boolean webkitSupportsFullscreen;
  readonly attribute boolean webkitDisplayingFullscreen;
  void webkitEnterFullscreen();
  void webkitExitFullscreen();
  void webkitEnterFullScreen();
  void webkitExitFullScreen();
  readonly attribute unsigned long webkitDecodedFrameCount;
  readonly attribute unsigned long webkitDroppedFrameCount;
};

partial interface IDBVersionChangeEvent {
  readonly attribute IDBDataLossAmount dataLoss;
  readonly attribute DOMString dataLossMessage;
};

partial interface MouseEvent {
  readonly attribute Node fromElement;
  readonly attribute Node toElement;
  readonly attribute long layerX;
  readonly attribute long layerY;
};

// https://w3c.github.io/uievents/#legacy-mutationevent-events

[Exposed=Window]
interface MutationEvent : Event {
  const unsigned short MODIFICATION = 1;
  const unsigned short ADDITION = 2;
  const unsigned short REMOVAL = 3;

  readonly attribute Node? relatedNode;
  readonly attribute DOMString prevValue;
  readonly attribute DOMString newValue;
  readonly attribute DOMString attrName;
  readonly attribute unsigned short attrChange;

  void initMutationEvent(DOMString type, boolean bubbles, boolean cancelable, Node? relatedNode, DOMString prevValue, DOMString newValue, DOMString attrName, unsigned short attrChange);
};

partial interface Navigator {
  void webkitGetUserMedia(MediaStreamConstraints constraints,
                          NavigatorUserMediaSuccessCallback successCallback,
                          NavigatorUserMediaErrorCallback errorCallback);
};

// https://www.w3.org/TR/DOM-Level-2-Traversal-Range/idl-definitions.html
partial interface NodeIterator {
  readonly attribute boolean expandEntityReferences;
};
partial interface TreeWalker {
  readonly attribute boolean expandEntityReferences;
};

partial interface Range {
  void expand(optional DOMString unit = "");
  short compareNode(Node node);
};

partial interface RTCDataChannel {
  readonly attribute boolean reliable;
};

partial interface RTCPeerConnection {
  sequence<MediaStream> getLocalStreams();
  sequence<MediaStream> getRemoteStreams();
  void addStream(MediaStream stream, optional any mediaConstraints);
  void removeStream(MediaStream stream);
  RTCDTMFSender createDTMFSender(MediaStreamTrack track);
  attribute EventHandler onaddstream;
  attribute EventHandler onremovestream;
};

partial interface Screen {
  readonly attribute long availLeft;
  readonly attribute long availTop;
};

partial interface Selection {
  readonly attribute Node? baseNode;
  readonly attribute unsigned long baseOffset;
  readonly attribute Node? extentNode;
  readonly attribute unsigned long extentOffset;

  void modify(optional DOMString alter = "",
              optional DOMString direction = "",
              optional DOMString granularity = "");
};

// https://www.w3.org/TR/2016/CR-SVG2-20160915/interact.html#InterfaceSVGCursorElement
[Exposed=Window]
interface SVGCursorElement : SVGElement {
  [SameObject] readonly attribute SVGAnimatedLength x;
  [SameObject] readonly attribute SVGAnimatedLength y;
};
SVGCursorElement includes SVGURIReference;

partial interface Text {
  NodeList getDestinationInsertionPoints();
};

partial interface WheelEvent {
  readonly attribute long wheelDeltaX;
  readonly attribute long wheelDeltaY;
  readonly attribute long wheelDelta;
};

partial interface Window {
  readonly attribute Navigator clientInformation;
  boolean find(optional DOMString string = "",
               optional boolean caseSensitive = false,
               optional boolean backwards = false,
               optional boolean wrap = false,
               optional boolean wholeWord = false,
               optional boolean searchInFrames = false,
               optional boolean showDialog = false);
  readonly attribute boolean offscreenBuffering;
  attribute DOMString defaultStatus;
  attribute DOMString defaultstatus;
  readonly attribute StyleMedia styleMedia;
  long webkitRequestAnimationFrame(FrameRequestCallback callback);
  void webkitCancelAnimationFrame(long id);
  attribute object WebKitCSSMatrix;
  attribute object WebKitMutationObserver;

  attribute EventHandler onsearch;
};

partial interface AnimationEvent {
  void initAnimationEvent(DOMString type, boolean bubbles, boolean cancelable, DOMString animationName, float elapsedTime);
};

partial interface AudioListener {
  attribute double dopplerFactor;
  attribute double speedOfSound;
};

[NoInterfaceObject]
interface mixin CanvasHitRegion {
  void addHitRegion(optional HitRegionOptions options);
  void removeHitRegion(DOMString id);
  void clearHitRegions();
};

CanvasRenderingContext2D includes CanvasHitRegion;

partial interface CanvasRenderingContext2D {
  attribute DOMMatrix currentTransform;
  void drawWidgetAsOnScreen(Window window);
  void drawWindow(Window window, double x, double y, double w, double h, DOMString bgColor, optional byte flags);
};

partial interface CloseEvent {
  CloseEvent initCloseEvent();
};

partial interface CompositionEvent {
  CompositionEvent initCompositionEvent();
  attribute DOMString locale;
};

partial namespace console {
  void exception(any msg);
  void profile(optional DOMString profileName);
  void profileEnd(optional DOMString profileName);
};

partial interface DataTransfer {
  attribute DOMString mozCursor;
  readonly attribute Node mozSourceNode;
  readonly attribute boolean mozUserCancelled;
  readonly attribute number mozItemCount;

  void mozClearDataAt(optional string type, unsigned long index);
  nsIVariant mozGetDataAt(optional string type, unsigned long index);
  void mozSetDataAt(optional string type, nsIVariant data, unsigned long index);
  nsIVariant mozTypesAt(unsigned long index);
};

partial interface AudioBufferSourceNode {
  attribute EventHandler onended;
};

partial interface AudioContext {
  ConstantSourceNode createConstantSource();
};

partial dictionary BasicCardRequest {
  sequence<DOMString> supportedTypes = [];
};

[Exposed=Window]
interface BlobBuilder {};

partial interface BluetoothDevice {
  readonly attribute BluetoothAdvertisingData adData;
  Promise<BluetoothGATTRemoteServer> connectGATT();
  readonly attribute long deviceClass;
  BluetoothGATTRemoteServer? gattServer();
  readonly attribute boolean paired;
  readonly attribute short productVersion;
  readonly attribute short productID;
  void unwatchAdvertisements();
  readonly attribute FrozenArray<long> uuids;
  readonly attribute long vendorID;
  readonly attribute long vendorIDSource;
};

partial interface CanMakePaymentEvent {
  readonly attribute FrozenArray<PaymentDetailsModifier> modifiers;
};

partial namespace console {
  void timeStamp(DOMString label);
};

[SecureContext]
interface mixin CredentialUserData {
  readonly attribute USVString name;
  readonly attribute USVString iconURL;
};

Credential includes CredentialUserData;

partial interface CSSStyleDeclaration {
  CSSValue getPropertyCSSValue(DOMString property);
};

partial interface DataTransfer {
  void addElement(Element el);
};

[Exposed=Window] interface DirectoryEntrySync {};
[Exposed=Window] interface DirectoryReaderSync {};

partial interface DOMMatrixReadOnly {
  void scaleNonUniformSelf(optional unrestricted double scaleX = 1, optional unrestricted double scaleY = 1);
  void transform();
};

[Exposed=Window] interface EntrySync {};

partial interface FetchEvent {
  readonly attribute Client client;
  readonly attribute boolean isReload;
  Promise<NavigationPreloadManager> navigationPreload();
  readonly attribute DOMString targetClientId;
};

partial interface File {
  readonly attribute DOMString type;
};

[Exposed=Window] interface FileEntrySync {};
[Exposed=Window] interface FileError {};
[Exposed=Window] interface FileException {};

partial interface FileSystemEntry {
  void getMetadata(MetadataCallback successCallback, optional ErrorCallback? errorCallback);
  void moveTo(DirectoryEntry parent, optional DOMString? name, optional EntryCallback? successCallback, optional ErrorCallback? errorCallback);
  void copyTo(DirectoryEntry parent, optional DOMString? name, optional EntryCallback? successCallback, optional ErrorCallback? errorCallback);
  DOMString toURL();
  void remove(VoidCallback successCallback, optional ErrorCallback? errorCallback);
};

partial interface FileSystemFileEntry {
  void createWriter(FileWriterCallback successCallback,
                    optional ErrorCallback? errorCallback);
};

[Exposed=Window] interface FileSystemSync {
  readonly attribute DOMString name;
  readonly attribute DirectoryEntry root;
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/modules/payments/abort_payment_event.idl;drc=c2e7d4f0b24814b0d1c51a964db34ec5b4930756
// https://github.com/w3c/payment-handler/pull/170
[
  Constructor=Image(DOMString type, optional ExtendableEventInit eventInitDict),
  Exposed=ServiceWorker
] interface AbortPaymentEvent : ExtendableEvent {
  [CallWith=ScriptState, RaisesException] void respondWith(Promise<boolean> paymentAbortedResponse);
};

// https://www.khronos.org/registry/webgl/extensions/

interface ANGLE_instanced_arrays {
  const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
  void drawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
  void drawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei primcount);
  void vertexAttribDivisorANGLE(GLuint index, GLuint divisor);
};

interface EXT_blend_minmax {
  const GLenum MIN_EXT = 0x8007;
  const GLenum MAX_EXT = 0x8008;
};

interface EXT_color_buffer_float {};

interface EXT_color_buffer_half_float {
  const GLenum RGBA16F_EXT = 0x881A;
  const GLenum RGB16F_EXT = 0x881B;
  const GLenum FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211;
  const GLenum UNSIGNED_NORMALIZED_EXT = 0x8C17;
};

interface EXT_disjoint_timer_query {
  const GLenum QUERY_COUNTER_BITS_EXT = 0x8864;
  const GLenum CURRENT_QUERY_EXT = 0x8865;
  const GLenum QUERY_RESULT_EXT = 0x8866;
  const GLenum QUERY_RESULT_AVAILABLE_EXT = 0x8867;
  const GLenum TIME_ELAPSED_EXT = 0x88BF;
  const GLenum TIMESTAMP_EXT = 0x8E28;
  const GLenum GPU_DISJOINT_EXT = 0x8FBB;

  WebGLTimerQueryEXT? createQueryEXT();
  void deleteQueryEXT(WebGLTimerQueryEXT? query);
  [WebGLHandlesContextLoss] boolean isQueryEXT(WebGLTimerQueryEXT? query);
  void beginQueryEXT(GLenum target, WebGLTimerQueryEXT query);
  void endQueryEXT(GLenum target);
  void queryCounterEXT(WebGLTimerQueryEXT query, GLenum target);
  any getQueryEXT(GLenum target, GLenum pname);
  any getQueryObjectEXT(WebGLTimerQueryEXT query, GLenum pname);
};

interface EXT_float_blend {};
interface EXT_frag_depth {};
interface EXT_shader_texture_lod {};

interface EXT_sRGB {
  const GLenum SRGB_EXT = 0x8C40;
  const GLenum SRGB_ALPHA_EXT = 0x8C42;
  const GLenum SRGB8_ALPHA8_EXT = 0x8C43;
  const GLenum FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210;
};

interface EXT_texture_compression_bptc {
  const GLenum COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C;
  const GLenum COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D;
  const GLenum COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E;
  const GLenum COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F;
};

interface EXT_texture_compression_rgtc {
  const GLenum COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
  const GLenum COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
  const GLenum COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
  const GLenum COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
};

interface EXT_texture_filter_anisotropic {
  const GLenum TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
  const GLenum MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/modules/app_banner/before_install_prompt_event.idl;drc=af69d93ec0d5334cdc03316058660a37116f32b3

[
  ActiveScriptWrappable,
  Exposed=Window
] interface BeforeInstallPromptEvent : Event {
  [CallWith=ExecutionContext] constructor(DOMString type, optional BeforeInstallPromptEventInit eventInitDict = {});
  readonly attribute FrozenArray<DOMString> platforms;
  [CallWith=ScriptState, RaisesException] readonly attribute Promise<AppBannerPromptResult> userChoice;
  [CallWith=ScriptState, RaisesException] Promise<void> prompt();
};

// https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingData

[Exposed=Window]
interface BluetoothAdvertisingData {
  readonly attribute unsigned short? appearance;
  readonly attribute byte? txPower;
  readonly attribute byte? rssi;
  readonly attribute Map manufacturerData;
  readonly attribute Map serviceData;
};

// https://wicg.github.io/budget-api/#budget-service-interface

[Exposed=(Window,Worker)]
interface BudgetService {
  Promise<double> getCost(OperationType operation);
  Promise<sequence<BudgetState>> getBudget();

  Promise<boolean> reserve(OperationType operation);
};

[Exposed=(Window,Worker)]
interface BudgetState {
  readonly attribute double budgetAt;
  readonly attribute DOMTimeStamp time;
};

// https://webaudio.github.io/web-audio-api/#AudioScheduledSourceNode
// Modified to extend ConstantSourceNode w/out mixin stuff

[Exposed=Window]
partial interface ConstantSourceNode {
  attribute EventHandler onended;
  void start(optional double when = 0);
  void stop(optional double when = 0);
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/animation/css/css_animation.idl;drc=607fff17f2f1b469b94b3b31288f3bfb78fed648

[Exposed=Window, RuntimeEnabled=WebAnimationsAPI]
interface CSSAnimation : Animation {
  readonly attribute CSSOMString animationName;
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/css/cssom/css_position_value.idl;drc=c2e7d4f0b24814b0d1c51a964db34ec5b4930756

[
  Exposed=(Window,LayoutWorklet,PaintWorklet)
] interface CSSPositionValue : CSSStyleValue {
  [RaisesException] constructor(CSSNumericValue x, CSSNumericValue y);
  [RaisesException=Setter] attribute CSSNumericValue x;
  [RaisesException=Setter] attribute CSSNumericValue y;
};

// https://www.w3.org/TR/DOM-Level-2-Style/css.html

[Exposed=Window]
interface CSSPrimitiveValue : CSSValue {
  const unsigned short CSS_UNKNOWN = 0;
  const unsigned short CSS_NUMBER = 1;
  const unsigned short CSS_PERCENTAGE = 2;
  const unsigned short CSS_EMS = 3;
  const unsigned short CSS_EXS = 4;
  const unsigned short CSS_PX = 5;
  const unsigned short CSS_CM = 6;
  const unsigned short CSS_MM = 7;
  const unsigned short CSS_IN = 8;
  const unsigned short CSS_PT = 9;
  const unsigned short CSS_PC = 10;
  const unsigned short CSS_DEG = 11;
  const unsigned short CSS_RAD = 12;
  const unsigned short CSS_GRAD = 13;
  const unsigned short CSS_MS = 14;
  const unsigned short CSS_S = 15;
  const unsigned short CSS_HZ = 16;
  const unsigned short CSS_KHZ = 17;
  const unsigned short CSS_DIMENSION = 18;
  const unsigned short CSS_STRING = 19;
  const unsigned short CSS_URI = 20;
  const unsigned short CSS_IDENT = 21;
  const unsigned short CSS_ATTR = 22;
  const unsigned short CSS_COUNTER = 23;
  const unsigned short CSS_RECT = 24;
  const unsigned short CSS_RGBCOLOR = 25;

  readonly attribute unsigned short primitiveType;
  void setFloatValue(unsigned short unitType, float floatValue);
  float getFloatValue(unsigned short unitType);
  void setStringValue(unsigned short stringType, DOMString stringValue);
  DOMString getStringValue();
  Counter getCounterValue();
  Rect getRectValue();
  RGBColor getRGBColorValue();
};

[Exposed=Window]
interface CSSValue {
  const unsigned short CSS_INHERIT = 0;
  const unsigned short CSS_PRIMITIVE_VALUE = 1;
  const unsigned short CSS_VALUE_LIST = 2;
  const unsigned short CSS_CUSTOM = 3;

  attribute DOMString cssText;
  readonly attribute unsigned short cssValueType;
};

[Exposed=Window]
interface CSSValueList : CSSValue {
  readonly attribute unsigned long length;
  CSSValue item(unsigned long index);
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/animation/css/css_transition.idl;drc=d692c061c5a4f07611af04d53a032c8ac4dde7c5

[Exposed=Window, RuntimeEnabled=WebAnimationsAPI]
interface CSSTransition : Animation {
  constructor();
  readonly attribute CSSOMString transitionProperty;
};

// https://searchfox.org/mozilla-central/rev/2f9eacd9d3d995c937b4251a5557d95d494c9be1/dom/webidl/DeviceLightEvent.webidl

[Exposed=Window]
interface DeviceLightEvent : Event {
  constructor(DOMString type, optional DeviceLightEventInit eventInitDict = {});
  readonly attribute unrestricted double value;
};

dictionary DeviceLightEventInit : EventInit {
  unrestricted double value = Infinity;
};

// https://searchfox.org/mozilla-central/rev/2f9eacd9d3d995c937b4251a5557d95d494c9be1/dom/webidl/DeviceProximityEvent.webidl

[Exposed=Window]
interface DeviceProximityEvent : Event {
  constructor(DOMString type, optional DeviceProximityEventInit eventInitDict = {});
  readonly attribute double value;
  readonly attribute double min;
  readonly attribute double max;
};

dictionary DeviceProximityEventInit : EventInit {
  unrestricted double value = Infinity;
  unrestricted double min = -Infinity;
  unrestricted double max = Infinity;
};

// https://www.w3.org/TR/DOM-Level-3-Core/idl-definitions.html

typedef any DOMUserData;
typedef object DOMObject;

partial interface Attr {
  readonly attribute TypeInfo schemaTypeInfo;
  readonly attribute boolean isId;
};

partial interface Document {
  EntityReference createEntityReference(DOMString name);
  readonly attribute DOMString xmlEncoding;
  attribute boolean xmlStandalone;
  readonly attribute DOMString xmlVersion;
  attribute boolean strictErrorChecking;
  readonly attribute DOMConfiguration domConfig;
};

partial interface DocumentType {
  readonly attribute NamedNodeMap entities;
  readonly attribute NamedNodeMap notations;
  readonly attribute DOMString internalSubset;
};

[Exposed=Window]
interface DOMConfiguration {
  void setParameter(DOMString name, DOMUserData value);
  DOMUserData getParameter(DOMString name);
  boolean canSetParameter(DOMString name, DOMUserData value);
  readonly attribute DOMStringList parameterNames;
  void normalizeDocument();
  Node renameNode(Node n, DOMString namespaceURI, DOMString qualifiedName);
};

[Exposed=Window]
interface DOMError {
  const unsigned short SEVERITY_WARNING = 1;
  const unsigned short SEVERITY_ERROR = 2;
  const unsigned short SEVERITY_FATAL_ERROR = 3;

  readonly attribute unsigned short severity;
  readonly attribute DOMString message;
  readonly attribute DOMString type;
  readonly attribute DOMObject relatedException;
  readonly attribute DOMObject relatedData;
  readonly attribute DOMLocator location;

  readonly attribute DOMString name;
};

[Exposed=Window]
callback interface DOMErrorHandler {
  boolean handleError(DOMError error);
};

partial interface DOMImplementation {
  DOMObject getFeature(DOMString feature, DOMString version);
};

[Exposed=Window]
interface DOMImplementationList {
  DOMImplementation item(unsigned long index);
  readonly attribute unsigned long length;
};

[Exposed=Window]
interface DOMImplementationSource {
  DOMImplementation getDOMImplementation(DOMString features);
  DOMImplementationList getDOMImplementationList(DOMString features);
};

[Exposed=Window]
interface DOMLocator {
  readonly attribute long lineNumber;
  readonly attribute long columnNumber;
  readonly attribute long byteOffset;
  readonly attribute long utf16Offset;
  readonly attribute Node relatedNode;
  readonly attribute DOMString uri;
};

partial interface Element {
  readonly attribute TypeInfo schemaTypeInfo;
  void setIdAttribute(DOMString name, boolean isId);
  void setIdAttributeNS(DOMString namespaceURI, DOMString localName, boolean isId);
  void setIdAttributeNode(Attr idAttr, boolean isId);
};

[Exposed=Window]
interface Entity : Node {
  readonly attribute DOMString publicId;
  readonly attribute DOMString systemId;
  readonly attribute DOMString notationName;
  readonly attribute DOMString inputEncoding;
  readonly attribute DOMString xmlEncoding;
  readonly attribute DOMString xmlVersion;
};

[Exposed=Window]
interface EntityReference : Node {};

[Exposed=Window]
interface NameList {
  DOMString getName(unsigned long index);
  DOMString getNamespaceURI(unsigned long index);
  readonly attribute unsigned long length;
  boolean contains(DOMString str);
  boolean containsNS(DOMString namespaceURI, DOMString name);
};

partial interface Node {
  boolean isSupported(DOMString feature, DOMString version);
  DOMObject getFeature(DOMString feature, DOMString version);
  DOMUserData getUserData(DOMString key);
  DOMUserData setUserData(DOMString key, DOMUserData data, UserDataHandler handler);
};

[Exposed=Window]
interface Notation : Node {
  readonly attribute DOMString publicId;
  readonly attribute DOMString systemId;
};

partial interface Text {
  readonly attribute boolean isElementContentWhitespace;
  Text replaceWholeText(DOMString content);
};

[Exposed=Window]
interface TypeInfo {
  readonly attribute DOMString typeName;
  readonly attribute DOMString typeNamespace;

  const unsigned long DERIVATION_RESTRICTION = 0x00000001;
  const unsigned long DERIVATION_EXTENSION = 0x00000002;
  const unsigned long DERIVATION_UNION = 0x00000004;
  const unsigned long DERIVATION_LIST = 0x00000008;

  boolean isDerivedFrom(DOMString typeNamespace, DOMString typeName, unsigned long derivationMethod);
};

[Exposed=Window]
interface UserDataHandler {
  const unsigned short NODE_CLONED = 1;
  const unsigned short NODE_IMPORTED = 2;
  const unsigned short NODE_DELETED = 3;
  const unsigned short NODE_RENAMED = 4;
  const unsigned short NODE_ADOPTED = 5;

  void handle(unsigned short operation, DOMString key, DOMUserData data, Node src, Node dst);
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/feature_policy/feature_policy.idl;drc=56a02023a0c4c3d513bf7cd972cf616eb25f73bc

[Exposed=Window]
interface FeaturePolicy {
  [MeasureAs=FeaturePolicyJSAPI, CallWith=ScriptState] boolean allowsFeature(DOMString feature, optional DOMString origin);
  [HighEntropy=Direct, MeasureAs=FeaturePolicyJSAPI, CallWith=ScriptState] sequence<DOMString> features();
  [MeasureAs=FeaturePolicyJSAPI, CallWith=ScriptState] sequence<DOMString> allowedFeatures();
  [MeasureAs=FeaturePolicyJSAPI, CallWith=ScriptState] sequence<DOMString> getAllowlistForFeature(DOMString feature);
};
