// Manually maintained definitions for features not in any specification, like
// non-standard features and features that have been removed or renamed.

dictionary ElementRegistrationOptions {
  object? prototype = null;
  DOMString? extends = null;
};

partial interface Document {
  Range caretRangeFromPoint(optional long x = 0, optional long y = 0);

  Promise<boolean> hasTrustToken(USVString issuer);

  readonly attribute FeaturePolicy featurePolicy;

  any registerElement(DOMString type, optional ElementRegistrationOptions options = {});

  readonly attribute DOMString webkitVisibilityState;
  readonly attribute boolean webkitHidden;

  attribute EventHandler onbeforecopy;
  attribute EventHandler onbeforecut;
  attribute EventHandler onbeforepaste;
  attribute EventHandler onsearch;
};

partial interface Element {
  void scrollIntoViewIfNeeded(optional boolean centerIfNeeded);
  ShadowRoot createShadowRoot();
  NodeList getDestinationInsertionPoints();
  readonly attribute DOMString? computedRole;
  readonly attribute DOMString? computedName;
  readonly attribute AccessibleNode? accessibleNode;

  attribute EventHandler onbeforecopy;
  attribute EventHandler onbeforecut;
  attribute EventHandler onbeforepaste;
  attribute EventHandler onsearch;
  attribute EventHandler onbeforematch;
};

partial interface Event {
  readonly attribute object path;
};

partial interface File {
  readonly attribute object lastModifiedDate;
};

[Exposed=Window]
interface GamepadAxisEvent : GamepadEvent {
  constructor(DOMString type, optional GamepadAxisEventInit eventInitDict = {});
  readonly attribute unsigned long axis;
  readonly attribute double value;
};

[Exposed=Window]
interface GamepadButtonEvent : GamepadEvent {
    constructor(DOMString type, optional GamepadButtonEventInit eventInitDict = {});
    readonly attribute unsigned long button;
    readonly attribute double value;
};

partial interface HTMLFrameSetElement {
  attribute EventHandler onorientationchange;
};

partial interface HTMLInputElement {
  attribute boolean incremental;
};

partial interface HTMLMediaElement {
  readonly attribute unsigned long long webkitAudioDecodedByteCount;
  readonly attribute unsigned long long webkitVideoDecodedByteCount;
};

partial interface HTMLVideoElement {
  readonly attribute boolean webkitSupportsFullscreen;
  readonly attribute boolean webkitDisplayingFullscreen;
  void webkitEnterFullscreen();
  void webkitExitFullscreen();
  void webkitEnterFullScreen();
  void webkitExitFullScreen();
  readonly attribute unsigned long webkitDecodedFrameCount;
  readonly attribute unsigned long webkitDroppedFrameCount;
};

partial interface IDBVersionChangeEvent {
  readonly attribute IDBDataLossAmount dataLoss;
  readonly attribute DOMString dataLossMessage;
};

partial interface MouseEvent {
  readonly attribute Node fromElement;
  readonly attribute Node toElement;
  readonly attribute long layerX;
  readonly attribute long layerY;
};

partial interface Navigator {
  void webkitGetUserMedia(MediaStreamConstraints constraints,
                          NavigatorUserMediaSuccessCallback successCallback,
                          NavigatorUserMediaErrorCallback errorCallback);
};

partial interface Range {
  void expand(optional DOMString unit = "");
};

partial interface RTCDataChannel {
  readonly attribute boolean reliable;
};

partial interface RTCPeerConnection {
  sequence<MediaStream> getLocalStreams();
  sequence<MediaStream> getRemoteStreams();
  void addStream(MediaStream stream, optional any mediaConstraints);
  void removeStream(MediaStream stream);
  RTCDTMFSender createDTMFSender(MediaStreamTrack track);
  attribute EventHandler onaddstream;
  attribute EventHandler onremovestream;
};

partial interface Screen {
  readonly attribute long availLeft;
  readonly attribute long availTop;
};

partial interface Selection {
  readonly attribute Node? baseNode;
  readonly attribute unsigned long baseOffset;
  readonly attribute Node? extentNode;
  readonly attribute unsigned long extentOffset;

  void modify(optional DOMString alter = "",
              optional DOMString direction = "",
              optional DOMString granularity = "");
};

// https://www.w3.org/TR/2016/CR-SVG2-20160915/interact.html#InterfaceSVGCursorElement
[Exposed=Window]
interface SVGCursorElement : SVGElement {
  [SameObject] readonly attribute SVGAnimatedLength x;
  [SameObject] readonly attribute SVGAnimatedLength y;
};
SVGCursorElement includes SVGURIReference;

partial interface Text {
  NodeList getDestinationInsertionPoints();
};

partial interface WheelEvent {
  readonly attribute long wheelDeltaX;
  readonly attribute long wheelDeltaY;
  readonly attribute long wheelDelta;
};

partial interface Window {
  readonly attribute Navigator clientInformation;
  boolean find(optional DOMString string = "",
               optional boolean caseSensitive = false,
               optional boolean backwards = false,
               optional boolean wrap = false,
               optional boolean wholeWord = false,
               optional boolean searchInFrames = false,
               optional boolean showDialog = false);
  readonly attribute boolean offscreenBuffering;
  attribute DOMString defaultStatus;
  attribute DOMString defaultstatus;
  readonly attribute StyleMedia styleMedia;
  long webkitRequestAnimationFrame(FrameRequestCallback callback);
  void webkitCancelAnimationFrame(long id);
  attribute object WebKitCSSMatrix;
  attribute object WebKitMutationObserver;

  attribute EventHandler onsearch;
};

partial interface AnimationEvent {
  AnimationEvent initAnimationEvent(DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, DOMString animationNameArg, float elapsedTimeArg);
};

partial interface AudioListener {
  attribute double dopplerFactor;
  attribute double speedOfSound;
};

[NoInterfaceObject]
interface mixin CanvasHitRegion {
  void addHitRegion(optional HitRegionOptions options);
  void removeHitRegion(DOMString id);
  void clearHitRegions();
};

CanvasRenderingContext2D includes CanvasHitRegion;

partial interface CanvasRenderingContext2D {
  attribute DOMMatrix currentTransform;
  void drawWidgetAsOnScreen(Window window);
  void drawWindow(Window window, double x, double y, double w, double h, DOMString bgColor, optional byte flags);
};

partial interface CloseEvent {
  CloseEvent initCloseEvent();
};

partial interface CompositionEvent {
  CompositionEvent initCompositionEvent();
  attribute DOMString locale;
};

partial namespace console {
  void exception(any msg);
  void profile(optional DOMString profileName);
  void profileEnd(optional DOMString profileName);
};

partial interface DataTransfer {
  attribute DOMString mozCursor;
  readonly attribute Node mozSourceNode;
  readonly attribute boolean mozUserCancelled;
  readonly attribute number mozItemCount;

  void mozClearDataAt(optional string type, unsigned long index);
  nsIVariant mozGetDataAt(optional string type, unsigned long index);
  void mozSetDataAt(optional string type, nsIVariant data, unsigned long index);
  nsIVariant mozTypesAt(unsigned long index);
};

partial interface AudioBufferSourceNode {
  attribute EventHandler onended;
};

partial interface AudioContext {
  ConstantSourceNode createConstantSource();
};

partial dictionary BasicCardRequest {
  sequence<DOMString> supportedTypes = [];
};

interface BlobBuilder {};

partial interface BluetoothDevice {
  readonly attribute BluetoothAdvertisingData adData;
  Promise<BluetoothGATTRemoteServer> connectGATT();
  readonly attribute long deviceClass;
  BluetoothGATTRemoteServer? gattServer();
  readonly attribute boolean paired;
  readonly attribute short productVersion;
  readonly attribute short productID;
  void unwatchAdvertisements();
  readonly attribute FrozenArray<long> uuids;
  readonly attribute long vendorID;
  readonly attribute long vendorIDSource;
};

partial interface CanMakePaymentEvent {
  readonly attribute FrozenArray<PaymentDetailsModifier> modifiers;
};

partial namespace console {
  void timeStamp(DOMString label);
};

[SecureContext]
interface mixin CredentialUserData {
  readonly attribute USVString name;
  readonly attribute USVString iconURL;
};

Credential includes CredentialUserData;

partial interface CSSStyleDeclaration {
  CSSValue getPropertyCSSValue(DOMString property);
};

partial interface DataTransfer {
  void addElement(Element el);
};

interface DirectoryEntrySync {};

interface DirectoryReaderSync {};

partial interface Document {
  boolean contains();
  void createEntityReference();
  Touch createTouch();
  TouchList createTouchList();
  readonly attribute nsIURI documentURIObject;
  readonly attribute DOMConfiguration domConfig;
  void enableStyleSheetsForSet(DOMString? name);
  boolean execCommandShowHelp(DOMString name);
  readonly attribute long fileSize;
  nsIBoxObject getBoxObjectFor(DOMElement element);
  readonly attribute long height;
  readonly attribute DOMString? lastStyleSheetSet;
  void loadOverlay(DOMString url, nsIObserver observer);
  void mozSetImageElement(DOMString imageElementId, DOMElement imageElement);
  readonly attribute boolean mozSyntheticDocument;
  void normalizeDocument();
  attribute EventHandler onafterscriptexecute;
  attribute EventHandler onbeforescriptexecute;
  readonly attribute DOMString? origin;
  readonly attribute Node? popupNode;
  readonly attribute DOMString? preferredStyleSheetSet;
  void queryCommandText();
  void releaseCapture();
  void routeEvent();
  readonly attribute DOMString? selectedStyleSheetSet;
  readonly attribute FrozenArray<DOMElement> styleSheetSets;
  readonly attribute XULTooltip tooltipNode;
  attribute UndoManager undoManager;
  readonly attribute long width;
  readonly attribute DOMString? xmlEncoding;
  readonly attribute DOMString? xmlStandalone;
  readonly attribute DOMString? xmlVersion;
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/modules/payments/abort_payment_event.idl;drc=c2e7d4f0b24814b0d1c51a964db34ec5b4930756
// https://github.com/w3c/payment-handler/pull/170
[
  Constructor=Image(DOMString type, optional ExtendableEventInit eventInitDict),
  Exposed=ServiceWorker
] interface AbortPaymentEvent : ExtendableEvent {
  [CallWith=ScriptState, RaisesException] void respondWith(Promise<boolean> paymentAbortedResponse);
};

// https://www.khronos.org/registry/webgl/extensions/ANGLE_instanced_arrays/

interface ANGLE_instanced_arrays {
  const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
  void drawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
  void drawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei primcount);
  void vertexAttribDivisorANGLE(GLuint index, GLuint divisor);
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/modules/app_banner/before_install_prompt_event.idl;drc=af69d93ec0d5334cdc03316058660a37116f32b3

[
  ActiveScriptWrappable,
  Exposed=Window
] interface BeforeInstallPromptEvent : Event {
  [CallWith=ExecutionContext] constructor(DOMString type, optional BeforeInstallPromptEventInit eventInitDict = {});
  readonly attribute FrozenArray<DOMString> platforms;
  [CallWith=ScriptState, RaisesException] readonly attribute Promise<AppBannerPromptResult> userChoice;
  [CallWith=ScriptState, RaisesException] Promise<void> prompt();
};

// https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingData

interface BluetoothAdvertisingData {
  readonly attribute unsigned short? appearance;
  readonly attribute byte? txPower;
  readonly attribute byte? rssi;
  readonly attribute Map manufacturerData;
  readonly attribute Map serviceData;
};

// https://wicg.github.io/budget-api/#budget-service-interface

[Exposed=(Window,Worker)]
interface BudgetService {
  Promise<double> getCost(OperationType operation);
  Promise<sequence<BudgetState>> getBudget();

  Promise<boolean> reserve(OperationType operation);
};

[Exposed=(Window,Worker)]
interface BudgetState {
  readonly attribute double budgetAt;
  readonly attribute DOMTimeStamp time;
};

// https://webaudio.github.io/web-audio-api/#AudioScheduledSourceNode
// Modified to extend ConstantSourceNode w/out mixin stuff

[Exposed=Window]
partial interface ConstantSourceNode {
  attribute EventHandler onended;
  void start(optional double when = 0);
  void stop(optional double when = 0);
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/animation/css/css_animation.idl;drc=607fff17f2f1b469b94b3b31288f3bfb78fed648

[Exposed=Window, RuntimeEnabled=WebAnimationsAPI]
interface CSSAnimation : Animation {
  readonly attribute CSSOMString animationName;
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/css/cssom/css_position_value.idl;drc=c2e7d4f0b24814b0d1c51a964db34ec5b4930756

[
  Exposed=(Window,LayoutWorklet,PaintWorklet)
] interface CSSPositionValue : CSSStyleValue {
  [RaisesException] constructor(CSSNumericValue x, CSSNumericValue y);
  [RaisesException=Setter] attribute CSSNumericValue x;
  [RaisesException=Setter] attribute CSSNumericValue y;
};

// https://www.w3.org/TR/DOM-Level-2-Style/css.html

interface CSSPrimitiveValue : CSSValue {
  const unsigned short CSS_UNKNOWN = 0;
  const unsigned short CSS_NUMBER = 1;
  const unsigned short CSS_PERCENTAGE = 2;
  const unsigned short CSS_EMS = 3;
  const unsigned short CSS_EXS = 4;
  const unsigned short CSS_PX = 5;
  const unsigned short CSS_CM = 6;
  const unsigned short CSS_MM = 7;
  const unsigned short CSS_IN = 8;
  const unsigned short CSS_PT = 9;
  const unsigned short CSS_PC = 10;
  const unsigned short CSS_DEG = 11;
  const unsigned short CSS_RAD = 12;
  const unsigned short CSS_GRAD = 13;
  const unsigned short CSS_MS = 14;
  const unsigned short CSS_S = 15;
  const unsigned short CSS_HZ = 16;
  const unsigned short CSS_KHZ = 17;
  const unsigned short CSS_DIMENSION = 18;
  const unsigned short CSS_STRING = 19;
  const unsigned short CSS_URI = 20;
  const unsigned short CSS_IDENT = 21;
  const unsigned short CSS_ATTR = 22;
  const unsigned short CSS_COUNTER = 23;
  const unsigned short CSS_RECT = 24;
  const unsigned short CSS_RGBCOLOR = 25;

  readonly attribute unsigned short primitiveType;
  void setFloatValue(unsigned short unitType, float floatValue);
  float getFloatValue(unsigned short unitType);
  void setStringValue(unsigned short stringType, DOMString stringValue);
  DOMString getStringValue();
  Counter getCounterValue();
  Rect getRectValue();
  RGBColor getRGBColorValue();
};

interface CSSValue {
  const unsigned short CSS_INHERIT = 0;
  const unsigned short CSS_PRIMITIVE_VALUE = 1;
  const unsigned short CSS_VALUE_LIST = 2;
  const unsigned short CSS_CUSTOM = 3;

  attribute DOMString cssText;
  readonly attribute unsigned short cssValueType;
};

interface CSSValueList : CSSValue {
  readonly attribute unsigned long length;
  CSSValue item(unsigned long index);
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/animation/css/css_transition.idl;drc=d692c061c5a4f07611af04d53a032c8ac4dde7c5

[Exposed=Window, RuntimeEnabled=WebAnimationsAPI]
interface CSSTransition : Animation {
  readonly attribute CSSOMString transitionProperty;
};

// https://searchfox.org/mozilla-central/rev/2f9eacd9d3d995c937b4251a5557d95d494c9be1/dom/webidl/DeviceLightEvent.webidl

[Exposed=Window]
interface DeviceLightEvent : Event {
  constructor(DOMString type, optional DeviceLightEventInit eventInitDict = {});
  readonly attribute unrestricted double value;
};

dictionary DeviceLightEventInit : EventInit {
  unrestricted double value = Infinity;
};

// https://searchfox.org/mozilla-central/rev/2f9eacd9d3d995c937b4251a5557d95d494c9be1/dom/webidl/DeviceProximityEvent.webidl

[Exposed=Window]
interface DeviceProximityEvent : Event {
  constructor(DOMString type, optional DeviceProximityEventInit eventInitDict = {});
  readonly attribute double value;
  readonly attribute double min;
  readonly attribute double max;
};

dictionary DeviceProximityEventInit : EventInit {
  unrestricted double value = Infinity;
  unrestricted double min = -Infinity;
  unrestricted double max = Infinity;
};

// https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-412266927

partial interface DocumentType {
  readonly attribute NamedNodeMap entities;
  readonly attribute DOMString internalSubset;
  readonly attribute NamedNodeMap notations;
};
