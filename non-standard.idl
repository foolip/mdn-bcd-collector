// Manually maintained definitions for features not in any specification, like
// non-standard features and features that have been removed or renamed.

dictionary ElementRegistrationOptions {
  object? prototype = null;
  DOMString? extends = null;
};

partial interface Document {
  Range caretRangeFromPoint(optional long x = 0, optional long y = 0);

  Promise<boolean> hasTrustToken(USVString issuer);

  readonly attribute FeaturePolicy featurePolicy;

  any registerElement(DOMString type, optional ElementRegistrationOptions options = {});

  readonly attribute DOMString webkitVisibilityState;
  readonly attribute boolean webkitHidden;

  attribute EventHandler onbeforecopy;
  attribute EventHandler onbeforecut;
  attribute EventHandler onbeforepaste;
  attribute EventHandler onsearch;
};

partial interface Element {
  void scrollIntoViewIfNeeded(optional boolean centerIfNeeded);
  ShadowRoot createShadowRoot();
  NodeList getDestinationInsertionPoints();
  readonly attribute DOMString? computedRole;
  readonly attribute DOMString? computedName;
  readonly attribute AccessibleNode? accessibleNode;

  attribute EventHandler onbeforecopy;
  attribute EventHandler onbeforecut;
  attribute EventHandler onbeforepaste;
  attribute EventHandler onsearch;
  attribute EventHandler onbeforematch;
};

partial interface Event {
  readonly attribute object path;
};

partial interface File {
  readonly attribute object lastModifiedDate;
};

[Exposed=Window]
interface GamepadAxisEvent : GamepadEvent {
  constructor(DOMString type, optional GamepadAxisEventInit eventInitDict = {});
  readonly attribute unsigned long axis;
  readonly attribute double value;
};

[Exposed=Window]
interface GamepadButtonEvent : GamepadEvent {
    constructor(DOMString type, optional GamepadButtonEventInit eventInitDict = {});
    readonly attribute unsigned long button;
    readonly attribute double value;
};

partial interface HTMLFrameSetElement {
  attribute EventHandler onorientationchange;
};

partial interface HTMLInputElement {
  attribute boolean incremental;
};

partial interface HTMLMediaElement {
  readonly attribute unsigned long long webkitAudioDecodedByteCount;
  readonly attribute unsigned long long webkitVideoDecodedByteCount;
};

partial interface HTMLVideoElement {
  readonly attribute boolean webkitSupportsFullscreen;
  readonly attribute boolean webkitDisplayingFullscreen;
  void webkitEnterFullscreen();
  void webkitExitFullscreen();
  void webkitEnterFullScreen();
  void webkitExitFullScreen();
  readonly attribute unsigned long webkitDecodedFrameCount;
  readonly attribute unsigned long webkitDroppedFrameCount;
};

partial interface IDBVersionChangeEvent {
  readonly attribute IDBDataLossAmount dataLoss;
  readonly attribute DOMString dataLossMessage;
};

partial interface MouseEvent {
  readonly attribute Node fromElement;
  readonly attribute Node toElement;
  readonly attribute long layerX;
  readonly attribute long layerY;
};

partial interface Navigator {
  void webkitGetUserMedia(MediaStreamConstraints constraints,
                          NavigatorUserMediaSuccessCallback successCallback,
                          NavigatorUserMediaErrorCallback errorCallback);
};

partial interface Range {
  void expand(optional DOMString unit = "");
};

partial interface RTCDataChannel {
  readonly attribute boolean reliable;
};

partial interface RTCPeerConnection {
  sequence<MediaStream> getLocalStreams();
  sequence<MediaStream> getRemoteStreams();
  void addStream(MediaStream stream, optional any mediaConstraints);
  void removeStream(MediaStream stream);
  RTCDTMFSender createDTMFSender(MediaStreamTrack track);
  attribute EventHandler onaddstream;
  attribute EventHandler onremovestream;
};

partial interface Screen {
  readonly attribute long availLeft;
  readonly attribute long availTop;
};

partial interface Selection {
  readonly attribute Node? baseNode;
  readonly attribute unsigned long baseOffset;
  readonly attribute Node? extentNode;
  readonly attribute unsigned long extentOffset;

  void modify(optional DOMString alter = "",
              optional DOMString direction = "",
              optional DOMString granularity = "");
};

partial interface Text {
  NodeList getDestinationInsertionPoints();
};

partial interface WheelEvent {
  readonly attribute long wheelDeltaX;
  readonly attribute long wheelDeltaY;
  readonly attribute long wheelDelta;
};

partial interface Window {
  readonly attribute Navigator clientInformation;
  boolean find(optional DOMString string = "",
               optional boolean caseSensitive = false,
               optional boolean backwards = false,
               optional boolean wrap = false,
               optional boolean wholeWord = false,
               optional boolean searchInFrames = false,
               optional boolean showDialog = false);
  readonly attribute boolean offscreenBuffering;
  attribute DOMString defaultStatus;
  attribute DOMString defaultstatus;
  readonly attribute StyleMedia styleMedia;
  long webkitRequestAnimationFrame(FrameRequestCallback callback);
  void webkitCancelAnimationFrame(long id);
  attribute object WebKitCSSMatrix;
  attribute object WebKitMutationObserver;

  attribute EventHandler onsearch;
};

partial interface AudioListener {
  attribute double dopplerFactor;
  attribute double speedOfSound;
};

[NoInterfaceObject]
interface mixin CanvasHitRegion {
  void addHitRegion(optional HitRegionOptions options);
  void removeHitRegion(DOMString id);
  void clearHitRegions();
};

CanvasRenderingContext2D includes CanvasHitRegion;

partial interface CanvasRenderingContext2D {
  attribute DOMMatrix currentTransform;
  void drawWidgetAsOnScreen(Window window);
  void drawWindow(Window window, double x, double y, double w, double h, DOMString bgColor, optional byte flags);
};

partial interface CloseEvent {
  CloseEvent initCloseEvent();
};

partial interface CompositionEvent {
  CompositionEvent initCompositionEvent();
  attribute DOMString locale;
};

partial namespace console {
  void exception(any msg);
  void profile(optional DOMString profileName);
  void profileEnd(optional DOMString profileName);
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/modules/payments/abort_payment_event.idl;drc=c2e7d4f0b24814b0d1c51a964db34ec5b4930756
// https://github.com/w3c/payment-handler/pull/170
[
    Constructor=Image(DOMString type, optional ExtendableEventInit eventInitDict),
    Exposed=ServiceWorker
] interface AbortPaymentEvent : ExtendableEvent {
    [CallWith=ScriptState, RaisesException] void respondWith(Promise<boolean> paymentAbortedResponse);
};

// https://www.khronos.org/registry/webgl/extensions/ANGLE_instanced_arrays/

interface ANGLE_instanced_arrays {
    const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
    void drawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
    void drawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei primcount);
    void vertexAttribDivisorANGLE(GLuint index, GLuint divisor); 
};

// https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/modules/app_banner/before_install_prompt_event.idl;drc=af69d93ec0d5334cdc03316058660a37116f32b3

[
    ActiveScriptWrappable,
    Exposed=Window
] interface BeforeInstallPromptEvent : Event {
    [CallWith=ExecutionContext] constructor(DOMString type, optional BeforeInstallPromptEventInit eventInitDict = {});
    readonly attribute FrozenArray<DOMString> platforms;
    [CallWith=ScriptState, RaisesException] readonly attribute Promise<AppBannerPromptResult> userChoice;
    [CallWith=ScriptState, RaisesException] Promise<void> prompt();
};

// https://wicg.github.io/budget-api/#budget-service-interface

[Exposed=(Window,Worker)]
interface BudgetService {
    Promise<double> getCost(OperationType operation);
    Promise<sequence<BudgetState>> getBudget();

    Promise<boolean> reserve(OperationType operation);
};

[Exposed=(Window,Worker)]
interface BudgetState {
  readonly attribute double budgetAt;
  readonly attribute DOMTimeStamp time;
};

// https://webaudio.github.io/web-audio-api/#AudioScheduledSourceNode
// Modified to extend ConstantSourceNode w/out mixin stuff

[Exposed=Window]
partial interface ConstantSourceNode {
  attribute EventHandler onended;
  void start(optional double when = 0);
  void stop(optional double when = 0);
};


// https://w3c.github.io/mediacapture-main/#dom-constrainboolean

typedef (boolean or ConstrainBooleanParameters) ConstrainBoolean;
typedef (DOMString or sequence<DOMString> or ConstrainDOMStringParameters) ConstrainDOMString;
typedef (double or ConstrainDoubleRange) ConstrainDouble;
typedef (long or ConstrainLongRange) ConstrainLong;
typedef ([Clamp] unsigned long or ConstrainULongRange) ConstrainULong;
