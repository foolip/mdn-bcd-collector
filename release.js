import chalk from 'chalk';
import esMain from 'es-main';
import fs from 'fs-extra';
import inquirer from 'inquirer';

import {exec} from './scripts.js';

const currentVersion = (
  await fs.readJson(new URL('./package.json', import.meta.url))
).version;

const getNewVersion = async () => {
  const versionParts = currentVersion.split('.').map((x) => Number(x));
  const newVersions = [
    `${versionParts[0] + 1}.0.0`,
    `${versionParts[0]}.${versionParts[1] + 1}.0`,
    `${versionParts[0]}.${versionParts[1]}.${versionParts[2] + 1}`
  ];

  const answers = await inquirer.prompt([
    {
      type: 'list',
      name: 'newVersion',
      message: 'How should we bump the version?',
      choices: [
        {
          name: `Major (${newVersions[0]})`,
          value: newVersions[0]
        },
        {
          name: `Minor (${newVersions[1]})`,
          value: newVersions[1]
        },
        {
          name: `Patch (${newVersions[2]})`,
          value: newVersions[2]
        }
      ],
      default: 2
    }
  ]);

  return answers.newVersion;
};

const doVersionBump = async (newVersion) => {
  for (const f of ['./package.json', './package-lock.json']) {
    const filepath = new URL(f, import.meta.url);
    const data = await fs.readJson(filepath);
    data.version = newVersion;
    await fs.writeJson(filepath, data, {spaces: 2});
  }
};

const getNewChangelogSection = async (newVersion) => {
  const answers = await inquirer.prompt([
    {
      type: 'editor',
      name: 'changelog',
      message: 'Write updates to the changelog',
      default: `## ${newVersion}\n\n### Tests\n\n#### New\n\n\n\n#### Updated\n\n\n\n### Additions\n\n\n\n### Changes\n\n\n\n### Removal\n\n`,
      postfix: '.md'
    }
  ]);

  return answers.changelog;
};

const doChangelogUpdate = async (newChangelogSection) => {
  const filepath = new URL('./CHANGELOG.md', import.meta.url);
  const changelog = await fs.readFile(filepath, 'utf8');
  const idx = changelog.indexOf('##');
  const newChangelog =
    changelog.substring(0, idx) +
    newChangelogSection +
    '\n\n' +
    changelog.substring(idx, changelog.length);
  await fs.writeFile(filepath, newChangelog, 'utf8');
};

const doPR = async (newVersion) => {
  const branch = `release-${newVersion}`;

  // exec('git checkout main');
  exec(`git branch ${branch}`);
  exec(`git checkout ${branch}`);
  exec('git stage package.json package-lock.json CHANGELOG.md');
  exec(
    `git commit -m "Release ${newVersion}" -m "" -m "Release v${newVersion}, generated by \\\`release.js\\\`."`
  );
  exec('gh pr create --fill --repo foolip/mdn-bcd-collector');
  exec('git checkout main');
};

const main = async () => {
  const newVersion = await getNewVersion();
  const newChangelogSection = await getNewChangelogSection(newVersion);

  const answers = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'confirm',
      message: `Ready to release ${newVersion}?`
    }
  ]);

  if (!answers.confirm) {
    console.log(chalk`{yellow Release cancelled by user}`);
    process.exit(0);
  }

  console.log('');

  await doVersionBump(newVersion);
  await doChangelogUpdate(newChangelogSection);
  await doPR(newVersion);
};

/* istanbul ignore if */
if (esMain(import.meta)) {
  await main();
}
