<div id="extension-warnings" class="paper hidden">
  <h2><span class="mdi mdi-alert"></span> Problematic Extensions Detected</h2>
  <div id="extension-warnings-extensions">

  </div>
  <hr />
  <p>Please disable these extensions or switch to a profile that does not use them.</p>
</div>

<script>
  (function() {
    var container = document.getElementById('extension-warnings-extensions');
    var doSend = <%- locals.sendToServer || false %>;

    function checkUrl(url, callback) {
      var client = new XMLHttpRequest();

      client.open('GET', url);
      client.send();
      client.onreadystatechange = function () {
        if (client.readyState == 4) {
          if (client.status >= 200 && client.status <= 299) {
            callback(true);
          } else {
            callback(false);
          }
        }
      };
    };

    function checkChromeExtension(id, callback) {
      if (id) {
        checkUrl('chrome-extension://' + id + '/assets/manifestIcons/icon.svg', callback);
      } else {
        callback(false);
      }
    }

    function checkFirefoxExtension(id, callback) {
      if (id) {
        checkUrl('moz-extension://' + id + '/assets/manifestIcons/icon.svg', callback);
      } else {
        callback(false);
      }
    }

    function checkExtension(options, callback) {
      checkChromeExtension(options.chromeId, function(result) {
        if (result) {
          callback('chrome');
        } else {
          checkFirefoxExtension(options.firefoxId, function(result) {
            if (result) {
              callback('firefox');
            } else {
              callback(false);

              // XXX Detect on Safari
            }
          });
        }
      })
    };

    function renderNote(extension) {
      var el = document.createElement('div');

      var elHdr = document.createElement('h3');
      elHdr.innerText = extension.name;
      el.appendChild(elHdr);
      var elTxt = document.createElement('p');
      elTxt.innerText = extension.message;
      el.appendChild(elTxt);

      container.appendChild(el);

      container.parentElement.classList.remove('hidden');
    }

    function sendToServer(results) {
      var client = new XMLHttpRequest();

      client.open('POST', '/api/browserExtensions');
      client.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
      client.send(JSON.stringify(results));
    }

    function checkExtensions(extensions) {
      if (!('XMLHttpRequest' in self)) {
        // Detection methods aren't supported, skip
        return;
      }

      var extensionsToCheck = Object.keys(extensions);
      var remaining = extensionsToCheck.length;

      var results = {};

      extensionsToCheck.forEach(function(k) {
        var extension = extensions[k];
        checkExtension(extension, function(result) {
          results[k] = result;
          remaining--;

          if (remaining == 0 && doSend) {
            sendToServer(results);
          }

          if (result) {
            renderNote(extension);
          }
        });
      });
    };

    checkExtensions(<%- JSON.stringify(browserExtensions) %>);
  })();
</script>
